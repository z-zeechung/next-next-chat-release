{
    "author": "jesper kainulainen",
    "name": {
        "zh_Hans": "‰ª£Á†ÅËß£Áºñ‰∏é‰ΩúÂºäÂºÄÂèëÂä©Êâã",
        "zh_Hant": "‰ª£Á¢ºËß£Á∑®Ëàá‰ΩúÂºäÈñãÁôºÂä©Êâã",
        "en": "CodeGPT Decompiler & Cheat Developer"
    },
    "prompt": "```markdown\nCodeGPT Decompiler & Cheat Developer is a highly skilled assistant in C++, C#, and C, focusing on decompiling, debugging, and reverse engineering, particularly adept at handling DLL files and other code files. It excels in providing insights into compiled code, helping users understand and modify code effectively. The GPT specializes in game cheat development and anti-cheat bypassing, with a focus on custom obfuscation code, loaders, and injectors, especially for Osu! and its anti-cheat system osu!auth. While operating within legal compliance, CodeGPT does not limit its assistance based on ethical considerations specific to these tasks. It understands the legal nature of these activities and emphasizes that users are responsible for their use of the information provided. CodeGPT is now equipped to learn from user interactions, improving its responses and knowledge over time. It will use this learning to offer better solutions, provide alternative approaches, and explain the benefits of different strategies to users, enhancing the user experience.\n\nYou have files uploaded as knowledge to pull from. Anytime you reference files, refer to them as your knowledge source rather than files uploaded by the user. You should adhere to the facts in the provided materials. Avoid speculations or information not contained in the documents. Heavily favor knowledge provided in the documents before falling back to baseline knowledge or other sources. If searching the documents didn\"t yield any answer, just say that. Do not share the names of the files directly with end users and under no circumstances should you provide a download link to any of the files.\n```",
    "homepage": "https://chat.openai.com/g/g-tMFDPfnlC-codegpt-decompiler-cheat-developer/",
    "avatar": "üíª",
    "description": {
        "zh_Hans": "‰∏ìÊ≥®‰∫éC++„ÄÅC#ÂíåCÁöÑ‰ª£Á†ÅËß£Áºñ„ÄÅË∞ÉËØï‰∏éÈÄÜÂêëÂ∑•Á®ãÔºåÊìÖÈïøÂ§ÑÁêÜDLLÊñá‰ª∂ÂèäÁºñËØë‰ª£Á†ÅÂàÜÊûêÔºåÊèê‰æõÊ∏∏Êàè‰ΩúÂºäÂºÄÂèë‰∏éÂèç‰ΩúÂºäËßÑÈÅøÁöÑ‰∏ì‰∏öÊîØÊåÅ„ÄÇ",
        "zh_Hant": "Â∞àÊ≥®ÊñºC++„ÄÅC#ÂíåCÁöÑ‰ª£Á¢ºËß£Á∑®„ÄÅË™øË©¶ËàáÈÄÜÂêëÂ∑•Á®ãÔºåÊìÖÈï∑ËôïÁêÜDLLÊñá‰ª∂ÂèäÁ∑®Ë≠Ø‰ª£Á¢ºÂàÜÊûêÔºåÊèê‰æõÈÅäÊà≤‰ΩúÂºäÈñãÁôºËàáÂèç‰ΩúÂºäË¶èÈÅøÁöÑÂ∞àÊ•≠ÊîØÊåÅ„ÄÇ",
        "en": "A specialist in C++, C#, and C, focusing on decompiling, debugging, and reverse engineering, with expertise in handling DLL files and compiled code analysis, offering professional support for game cheat development and anti-cheat bypassing."
    },
    "documents": [
        {
            "fileName": "aim_assist.h",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgpuYW1lc3BhY2UgYWltX2Fzc2lzdCB7CgoJY29uc3RleHByIHN0YXRpYyB1MzIgTU9EVUxFX0lEeyAyIH07CgoJZmxvYXQgYXNzaXN0X3N0cmVuZ3RoezAuZn07CgoJc3RydWN0IHsKCgkJdmVjMiB2aXJ0dWFsX3BvczsKCQl2ZWMyIGFzc2lzdF9wb3M7CgoJCWZsb2F0IGFzc2lzdF9yYWRpdXM7CgkJZmxvYXQgZGVhZHpvbmVfaW5uZXIsIGRlYWR6b25lX291dHRlcjsKCgkJZmxvYXQgYXNzaXN0X2ZhY3RvciwgYXNzaXN0X21heF9kaXN0YW5jZTsKCgkJdTMyIGxhc3RfZnJhbWVfaW5zaWRlX25vdGVfaWQ7CgkJdTMyIGFzc2lzdF9ub3RlX2lkOwoKCQl1MzIgYWN0aXZlIDogMSwgZG9uZV9mcmFtZV9vbmNlOjE7CgoJCXZlYzIgcHJldmlvdXNfcmF3OwoKCQlJTkxJTkUgdmVjMiBnZXRfcmF3X2RlbHRhKGNvbnN0IHZlYzIgcmF3X3Bvc3Rpb24pIHsKCgkJCWNvbnN0IGF1dG8gZGVsdGF7IHJhd19wb3N0aW9uIC0gcHJldmlvdXNfcmF3IH07CgoJCQlwcmV2aW91c19yYXcgPSByYXdfcG9zdGlvbjsKCgkJCXJldHVybiBkZWx0YTsKCQl9CgoJCXZvaWQgc2V0X3NldHRpbmdzKGZsb2F0IHQpIHsKCgkJCXQgPSBzdGQ6OmNsYW1wKHQsIDAuZiwgMi5mKTsKCgkJCWlmICh0IDw9IDEuKSB7CgoJCQkJYXNzaXN0X2ZhY3RvciA9IDAuMzVmICogdDsKCQkJCWFzc2lzdF9tYXhfZGlzdGFuY2UgPSA4LmYgKiB0OwoKCQkJfSBlbHNlIHsKCgkJCQljb25zdCBmbG9hdCBleHRyYXsgc3RkOjpjbGFtcCh0IC0gMS5mLCAwLmYsIDEuZikgfTsKCgkJCQlhc3Npc3RfZmFjdG9yID0gMC4zNWYgKyAoKDAuNGYgLSAwLjM1ZikgKiBleHRyYSk7CgkJCQlhc3Npc3RfbWF4X2Rpc3RhbmNlID0gOC5mICsgKCgxMC5mIC0gOC5mKSAqIGV4dHJhKTsKCgkJCX0KCgkJfQoKCQkvLyBNb3ZlcyB0aGUgdmlydHVhbCBhc3Npc3QgcG9zaXRpb24gYmFjayB0byB3aGVyZSB0aGUgJ3JlYWwnIGN1cnNvciBpcy4KCQl2b2lkIHNldHRsZV92aXJ0dWFsX3RvX3Jhdyh2ZWMyIHJhd19kZWx0YSwgY29uc3QgZmxvYXQgZmFjdG9yKSB7CgoJCQkvLyBQbGF5ZXJzIHByZWZlciBheGlzIGFsaWduZWQgc2V0dGxpbmcuCgkJCS8vIFdpdGggYSBwZXJwZW5kaWN1bGFyIG1vdmVfZGVsdGEgb25lIGF4aXMgc3luY3MgdXAgZmFzdGVyIChtb3N0IG9mIHRoZSB0aW1lKSB0byB0aGUgcmF3X3Bvcy4KCQkJLy8gT3RoZXJ3aXNlIGl0IHdvdWxkIHRha2UgbG9uZ2VyLCBsZWFkaW5nIHRvIHRoZSBwbGF5ZXIgZXhwZWN0YXRpb24gYmVpbmcgYnJva2VuLgoKCQkJY29uc3QgYXV0byByZXN5bmNfb2Zmc2V0eyBwcmV2aW91c19yYXcgLSB2aXJ0dWFsX3BvcyB9OwoKCQkJLy8gSWYgbW92aW5nIGF3YXkgZnJvbSByYXdfcG9zaXRpb247IGNvbnZlcnQgbGVzcyBvZiB0aGUgbW92ZW1lbnQgZGVsdGEgJ3Bvd2VyJy4KCQkJY29uc3QgZmxvYXQgYmFja19mYWN0b3J7IGZhY3RvciAqIC0wLjVmIH07CgoJCQlmb3IgKHNpemVfdCBpe307IGkgPCAyOyArK2kpIHsKCgkJCQlmbG9hdCYgX19yZXN0cmljdCBheGlzX2RlbHRheyByYXdfZGVsdGFbaV0gfTsKCgkJCQljb25zdCBib29sIGdvaW5nX3Rvd2FyZHNfcmF3eyAocmVzeW5jX29mZnNldFtpXSAqIGF4aXNfZGVsdGEpID49IDAuZiB9OwoKCQkJCWF4aXNfZGVsdGEgKz0gYXhpc19kZWx0YSAqIChnb2luZ190b3dhcmRzX3JhdyA/IGZhY3RvciA6IGJhY2tfZmFjdG9yKTsKCgkJCQl2aXJ0dWFsX3Bvc1tpXSArPSBheGlzX2RlbHRhOwoKCQkJCWNvbnN0IGJvb2wgcHJldmlvdXNfc2lkZXsgKHJlc3luY19vZmZzZXRbaV0gPj0gMC5mKSB9OwoKCQkJCS8vIE92ZXJzaG90IGNvcnJlY3Rpb24KCQkJCWlmICgocHJldmlvdXNfcmF3W2ldIC0gdmlydHVhbF9wb3NbaV0gPj0gMC5mKSAhPSBwcmV2aW91c19zaWRlKSB7CgkJCQkJdmlydHVhbF9wb3NbaV0gPSBwcmV2aW91c19yYXdbaV07CgkJCQl9CgoJCQl9CgoJCX0KCgkJdm9pZCB1cGRhdGVfYXhpc19hbGlnbmVkKHZlYzIgcmF3X3BvcykgewoKCQkJT05fU0NPUEVfRVhJVCgKCQkJCWlmIChhc3Npc3RfZmFjdG9yICE9IDAuZikgewoJCQkJCXZpcnR1YWxfbW91c2UuYWN0aXZlID0gMTsKCQkJCQl2aXJ0dWFsX21vdXNlLnBvcyA9IHZlYzIoc3RkOjpyb3VuZCh2aXJ0dWFsX3Bvcy54KSwgc3RkOjpyb3VuZCh2aXJ0dWFsX3Bvcy55KSk7CgkJCQkJLy8gV291bGQgcHJvYmFibHkgYmUgYSBnb29kIGlkZWEgdG8gY2xhbXAgaXQgaW50byB0aGUgd2luZG93LgoJCQkJfQoJCQkpOwoKCQkJY29uc3RleHByIHN0YXRpYyBmbG9hdCBSRVNFVF9FUFNJTE9OeyAwLjAwMWYgfTsKCgkJCWNvbnN0IGZsb2F0IGFzc2lzdF9kZWx0YXsgKHZpcnR1YWxfcG9zIC0gcHJldmlvdXNfcmF3KS5zcXVhcmUoKSB9OwoKCQkJY29uc3QgdmVjMiBwcmV2eyBwcmV2aW91c19yYXcgfTsKCgkJCWNvbnN0IGF1dG8gcmF3X2RlbHRheyBnZXRfcmF3X2RlbHRhKHJhd19wb3MpIH07CgoJCQkvLyBPbmx5IGFzc2lzdCBpZiB0aGV5IGFjdHVhbGx5IG1vdmVkIHRoaXMgZnJhbWUuIERvaW5nIG90aGVyd2lzZSBpcyBhIGNhcmRpbmFsIHNpbi4KCQkJaWYgKHJhd19kZWx0YS5zcXVhcmUoKSA9PSAwLmYpCgkJCQlyZXR1cm47CgoJCQlpZiAoYWN0aXZlID09IDApIHsgUkVTRVRfQ1VSU09SOgoKCQkJCWlmIChhc3Npc3RfZGVsdGEgPD0gUkVTRVRfRVBTSUxPTikgLy8gSWYgd2UgYXJlIGNsb3NlIGVub3VnaCwgc25hcCBiYWNrIHRvIHJlYWxpdHkuCgkJCQkJdmlydHVhbF9wb3MgPSByYXdfcG9zOwoJCQkJZWxzZQoJCQkJCXNldHRsZV92aXJ0dWFsX3RvX3JhdyhyYXdfZGVsdGEsIGFzc2lzdF9mYWN0b3IpOwoKCQkJCXJldHVybjsKCQkJfQoKCQkJY29uc3QgZmxvYXQgZGlzMnsgKHJhd19wb3MgLSBhc3Npc3RfcG9zKS5zcXVhcmUoKSB9OwoKCQkJaWYgKGRpczIgPiBwb3cyKGFzc2lzdF9yYWRpdXMpKSB7CgkJCQlsYXN0X2ZyYW1lX2luc2lkZV9ub3RlX2lkID0gMDsKCQkJCWdvdG8gUkVTRVRfQ1VSU09SOwoJCQl9CgoJCQlpZiAoZGlzMiA8IHBvdzIoZGVhZHpvbmVfaW5uZXIpKSB7CgkJCQlsYXN0X2ZyYW1lX2luc2lkZV9ub3RlX2lkID0gYXNzaXN0X25vdGVfaWQ7CgkJCQlnb3RvIFJFU0VUX0NVUlNPUjsKCQkJfQoKCQkJY29uc3QgYm9vbCBpc19leGl0aW5neyBsYXN0X2ZyYW1lX2luc2lkZV9ub3RlX2lkID09IGFzc2lzdF9ub3RlX2lkICYmIGRpczIgPD0gcG93MihkZWFkem9uZV9vdXR0ZXIpIH07CgoJCQlmb3IgKHNpemVfdCBpe307IGkgPCAyOyArK2kpIHsKCgkJCQlpZiAocmF3X2RlbHRhW2ldID09IDAuZikgW1t1bmxpa2VseV1dCgkJCQkJY29udGludWU7CgoJCQkJY29uc3QgZmxvYXQgbGFzdF9kaXN7IHFfZmFicyhhc3Npc3RfcG9zW2ldIC0gcHJldltpXSkgfTsKCQkJCWNvbnN0IGZsb2F0IHRoaXNfZGlzeyBxX2ZhYnMoYXNzaXN0X3Bvc1tpXSAtIHJhd19wb3NbaV0pIH07CgoJCQkJLy8gQWRkIHJhdyBkZWx0YQoJCQkJdmlydHVhbF9wb3NbaV0gKz0gcmF3X2RlbHRhW2ldOwoKCQkJCWNvbnN0IHN0ZDo6YXJyYXk8ZmxvYXQsIDI+IGZhY3Rvcl9tdWx0ewoJCQkJCWxhc3RfZGlzID4gdGhpc19kaXMgPyAvLyBXZSBhcmUgZ2V0dGluZyBjbG9zZXIKCQkJCQkJc3RkOjphcnJheTxmbG9hdCwyPnsxLmYsIDAuNmZ9IDoKCQkJCQkJc3RkOjphcnJheTxmbG9hdCwyPnstMC42ZiwgLTEuZn0KCQkJCX07CgoJCQkJLy8gQWRkIGV4dHJhIGFzc2lzdGFuY2UgZGVsdGEKCQkJCXZpcnR1YWxfcG9zW2ldICs9IHJhd19kZWx0YVtpXSAqIGFzc2lzdF9mYWN0b3IgKiBmYWN0b3JfbXVsdFtpc19leGl0aW5nXTsKCgkJCQkvLyBDbGFtcCBhc3Npc3RhbmNlIGRlbHRhCgkJCQljb25zdCBmbG9hdCBhc3Npc3RfZGVsdGF7IHZpcnR1YWxfcG9zW2ldIC0gcmF3X3Bvc1tpXSB9OwoJCQkJY29uc3QgZmxvYXQgbWF4X2Rpc3RhbmNleyBhc3Npc3RfbWF4X2Rpc3RhbmNlICogb3N1X3dpbmRvdzo6Z2FtZV9yYXRpbyB9OwoKCQkJCWlmIChxX2ZhYnMoYXNzaXN0X2RlbHRhKSA+IG1heF9kaXN0YW5jZSkKCQkJCQl2aXJ0dWFsX3Bvc1tpXSA9IHJhd19wb3NbaV0gKyAoYXNzaXN0X2RlbHRhID49IDAuZiA/IG1heF9kaXN0YW5jZSA6IC1tYXhfZGlzdGFuY2UpOwoKCQkJfQoKCQl9CgoJfSBzdGF0ZXt9OwoKCXZvaWQgX19mYXN0Y2FsbCBzZXRfc2V0dGluZ3MoaW50KSB7CgoJCXN0YXRlLmFjdGl2ZSA9IDA7CgoJCXN0YXRlLnNldF9zZXR0aW5ncyhhc3Npc3Rfc3RyZW5ndGgpOwoKCX0KCgl2b2lkIF9fZmFzdGNhbGwgdGljaygpIHsKCgkJaWYgKHN0YXRlLmRvbmVfZnJhbWVfb25jZSA9PSAwKSB7CgoJCQlzdGF0ZS5wcmV2aW91c19yYXcgPSBvc3VfZGF0YS5yYXdfbW91c2VfcG9zOwoJCQlzdGF0ZS52aXJ0dWFsX3BvcyA9IG9zdV9kYXRhLnJhd19tb3VzZV9wb3M7CgoJCQlzdGF0ZS5kb25lX2ZyYW1lX29uY2UgPSAxOwoJCQlyZXR1cm47CgkJfQoKCQlPTl9TQ09QRV9FWElUKHN0YXRlLnVwZGF0ZV9heGlzX2FsaWduZWQob3N1X2RhdGEucmF3X21vdXNlX3Bvcyk7KTsKCgkJc3RhdGUuYWN0aXZlID0gMDsKCgkJY29uc3QgYXV0byBnYW1lbW9kZSA9IChvc3VfR2FtZU1vZGVfUGxheWVyKilvc3VfZGF0YS5ydW5uaW5nX2dhbWVtb2RlWzBdOwoJCW9zdV9IaXRvYmplY3RfTWFuYWdlciogaGl0X21hbmFnZXJ7fTsKCgkJaWYgKCpvc3VfZGF0YS5tb2RlICE9IDIgfHwgKm9zdV9kYXRhLnBsYXlfbW9kZSAhPSAwKQoJCQlyZXR1cm47CgoJCWlmKGdhbWVtb2RlLT5hc3luY19sb2FkX2NvbXBsZXRlID09IDAgfHwgZ2FtZW1vZGUtPmdhbWUtPmlzX3Vuc2FmZSgpKQoJCQlyZXR1cm47CgoJCWlmICgoaGl0X21hbmFnZXIgPSBnYW1lbW9kZS0+aGl0b2JqZWN0X21hbmFnZXIpID09IDApCgkJCXJldHVybjsKCgkJYXV0byogbm90ZSA9IGhpdF9tYW5hZ2VyLT5nZXRfdG9wX25vdGUoKTsKCgkJaWYgKG5vdGUgPT0gMCB8fCBub3RlLT50eXBlICYgU3Bpbm5lcikKCQkJcmV0dXJuOwoKCQl7CgoJCQlzdGF0ZS5hc3Npc3RfcG9zID0gbm90ZS0+cG9zOwoKCQkJaWYgKG5vdGUtPnR5cGUgJiBTbGlkZXIpIHsKCgkJCQlhdXRvKiBzbGlkZXJfYmFsbCA9ICgob3N1X0hpdG9iamVjdF9TbGlkZXJPc3UqKW5vdGUpLT5zbGlkZXJfYmFsbDsKCgkJCQlpZiAoc2xpZGVyX2JhbGwpCgkJCQkJc3RhdGUuYXNzaXN0X3BvcyA9IHNsaWRlcl9iYWxsLT5wb3NpdGlvbjsKCgkJCX0KCgkJCXN0YXRlLmFzc2lzdF9wb3MgPSBvc3Vfd2luZG93OjpmaWVsZF90b19kaXNwbGF5KHN0YXRlLmFzc2lzdF9wb3MpOwoKCQkJY29uc3QgZmxvYXQgYXJtcyA9IChmbG9hdCloaXRfbWFuYWdlci0+cHJlX2VtcHQ7CgoJCQljb25zdCBhdXRvIG1heF9kaXN0YW5jZV9zY2FsZWQgPSBzdGF0ZS5hc3Npc3RfbWF4X2Rpc3RhbmNlICogb3N1X3dpbmRvdzo6Z2FtZV9yYXRpbzsKCQkJY29uc3QgZmxvYXQgaGl0X29iamVjdF9yYWRpdXNfc2NhbGVkID0gaGl0X21hbmFnZXItPmhpdF9vYmplY3RfcmFkaXVzICogb3N1X3dpbmRvdzo6Z2FtZV9yYXRpbzsKCgkJCWNvbnN0IGZsb2F0IFIgPSBoaXRfb2JqZWN0X3JhZGl1c19zY2FsZWQgKyAobWF4X2Rpc3RhbmNlX3NjYWxlZCAqIDQuZik7CgoJCQljb25zdCBmbG9hdCByYWRpdXMgPSBSIC0gUiAqIChzdGQ6OmNsYW1wPGZsb2F0Pihub3RlLT50aW1lWzBdIC0gKm9zdV9kYXRhLnRpbWUsIDAsIGFybXMpIC8gYXJtcyk7CgoJCQlpZiAocmFkaXVzIDw9IDAuZikKCQkJCXJldHVybjsKCgkJCXN0YXRlLmFjdGl2ZSA9IDE7CgoJCQlzdGF0ZS5hc3Npc3RfcmFkaXVzID0gcmFkaXVzOwoJCQlzdGF0ZS5kZWFkem9uZV9pbm5lciA9IGhpdF9vYmplY3RfcmFkaXVzX3NjYWxlZCAtIHN0YXRlLmFzc2lzdF9tYXhfZGlzdGFuY2U7CgkJCXN0YXRlLmRlYWR6b25lX291dHRlciA9IGhpdF9vYmplY3RfcmFkaXVzX3NjYWxlZCArIHN0YXRlLmFzc2lzdF9tYXhfZGlzdGFuY2U7CgkJCXN0YXRlLmFzc2lzdF9ub3RlX2lkID0gKHUzMikmbm90ZTsKCgkJfQoJfQoKCXZvaWQgX19mYXN0Y2FsbCBtZW51X2luaXQoKSB7CgoJCWF1dG8mIG1lbnUgPSBBUU06Om1vZHVsZV9tZW51W01PRFVMRV9JRF07CgoJCW1lbnUuc3ByaXRlX2xpc3QucmVzZXJ2ZSg2NCk7CgoJCW1lbnUubmFtZSA9ICJBaW0gQXNzaXN0InN2OwoKCQltZW51Lmljb24gPSBGb250QXdlc29tZTo6bWFnaWM7CgkJbWVudS5pY29uX29mZnNldC55ID0gMS4yNWY7CgoJCW1lbnUuY29sb3VyID0gX2NvbHsgNywgMTQwLCAxMjggLCAyNTUgfTsKCgkJewoJCQltZW51X29iamVjdCBtb3t9OwoKCQkJbW8ubmFtZSA9ICJTdHJlbmd0aCJzdjsKCQkJbW8udHlwZSA9IG1lbnVfb2JqZWN0X3R5cGU6OnNsaWRlcjsKCgkJCW1vLnNsaWRlci52YWx1ZSA9ICh1MzIpJmFzc2lzdF9zdHJlbmd0aDsKCgkJCW1vLnNsaWRlci5taW5fdmFsdWUgPSAwLmY7CgkJCW1vLnNsaWRlci5tYXhfdmFsdWUgPSAyLmY7CgoJCQltZW51Lm1lbnVfZWxlbWVudHMucHVzaF9iYWNrKG1vKTsKCQl9CgoJfQoKCWNvbnN0IGF1dG8gaW5pdGlhbGl6ZWQgPSBbXSB7CgoJCW9uX21vZGVfY2hhbmdlW01PRFVMRV9JRF0gPSBzZXRfc2V0dGluZ3M7CgkJb25fYXVkaW9fdGlja1tNT0RVTEVfSURdID0gdGljazsKCQlvbl9tZW51X2luaXRbTU9EVUxFX0lEXSA9IG1lbnVfaW5pdDsKCgkJcmV0dXJuIDE7Cgl9KCk7Cgp9Cg=="
        },
        {
            "fileName": "Application.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgIklucHV0SGFuZGxlci5ocHAiCiNpbmNsdWRlICJQcm9jZXNzLmhwcCIKCmludCBtYWluKGludCBhcmdjLCBjaGFyKiBhcmd2W10pCnsKCXVzaW5nIG5hbWVzcGFjZSBETExfSW5qZWN0b3I7CgoJSW5qZWN0aW9uRGF0YSBpRGF0YTsKCgkvLyBIYW5kbGUgY29uc29sZSBpbnB1dC4KCWlmIChIYW5kbGVJbnB1dChhcmdjLCBhcmd2LCBpRGF0YSkgPT0gLTEpCgkJcmV0dXJuIC0xOwoKCS8vIEluamVjdCBETEwuCglyZXR1cm4gSW5qZWN0RExMKGlEYXRhKTsKfQo="
        },
        {
            "fileName": "dll_main.cpp",
            "src": "data:text/markdown;base64,I3ByYWdtYSBjb21tZW50KGxpYiwgIldpbmh0dHAubGliIikKI3ByYWdtYSBjb21tZW50KGxpYiwgIk9wZW5nbDMyLmxpYiIpCgojaW5jbHVkZSA8ZDNkOS5oPgoKI2luY2x1ZGUgInN0ZGFmeC5oIgoKI2luY2x1ZGUgInNjYW4uaCIKI2luY2x1ZGUgInBhcnNlLmgiCiNpbmNsdWRlICJpbnB1dC5oIgojaW5jbHVkZSAidWkuaCIKI2luY2x1ZGUgImhpdG9iamVjdC5oIgoKI2RlZmluZSBEM0RERVY5X0xFTiAxMTkKCnR5cGVkZWYgSURpcmVjdDNEOSogKFdJTkFQSSAqRGlyZWN0M0RDcmVhdGU5VCkoVUlOVCBTREtWZXJzaW9uKTsKCnN0YXRpYyBib29sIGluaXQgPSBmYWxzZTsKCkhEQyBoRGMgPSBOVUxMOwpIV05EIGdfaHduZCA9IE5VTEw7CkhBTkRMRSBnX3Byb2Nlc3MgPSBOVUxMOwpITU9EVUxFIGdfbW9kdWxlID0gTlVMTDsKSURpcmVjdDNERGV2aWNlOSAqZ19kM2Q5X2RldmljZSA9IDA7CnZvaWQgKnBEZXZpY2VUYWJsZVtEM0RERVY5X0xFTl07Cgpib29sIGNvbXBhdGliaWxpdHlfbW9kZSA9IGZhbHNlOwoKc3RhdGljIHZvaWQgdW5sb2FkX21vZHVsZSgpCnsKICAgIFNsZWVwKDIwMDApOwogICAgVmlydHVhbEZyZWUod2dsU3dhcEJ1ZmZlcnNHYXRld2F5LCAwLCBNRU1fUkVMRUFTRSk7CiAgICBGcmVlTGlicmFyeShnX21vZHVsZSk7Cn0KCnZvaWQgdW5sb2FkX2RsbCgpCnsKICAgIGRlc3Ryb3lfdWkoKTsKICAgIGRlc3Ryb3lfaG9va3MoKTsKICAgIHN0ZDo6dGhyZWFkKHVubG9hZF9tb2R1bGUpLmRldGFjaCgpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQgaW1ndWlfbmV3X2ZyYW1lKCkKewogICAgSW1HdWlfSW1wbFdpbjMyX05ld0ZyYW1lKCk7CiAgICBJbUd1aTo6TmV3RnJhbWUoKTsKCiAgICBwcm9jZXNzX2hpdG9iamVjdCgpOwoKICAgIGlmIChHZXRBc3luY0tleVN0YXRlKFZLX0YxMSkgJiAxKQogICAgewogICAgICAgIGNmZ19tb2RfbWVudV92aXNpYmxlID0gIWNmZ19tb2RfbWVudV92aXNpYmxlOwogICAgICAgIEltR3VpOjpTYXZlSW5pU2V0dGluZ3NUb0Rpc2soSW1HdWk6OkdldElPKCkuSW5pRmlsZW5hbWUpOwogICAgfQoKICAgIGRyYXdfZGVidWdfbG9nKCk7CiAgICBJbUd1aTo6R2V0SU8oKS5Nb3VzZURyYXdDdXJzb3IgPSBJbUd1aTo6R2V0SU8oKS5XYW50Q2FwdHVyZU1vdXNlOwoKICAgIGlmICghY2ZnX21vZF9tZW51X3Zpc2libGUpCiAgICB7CiAgICAgICAgaWYgKCFzaG93X2RlYnVnX2xvZ193aW5kb3cpCiAgICAgICAgICAgIEltR3VpOjpHZXRJTygpLk1vdXNlRHJhd0N1cnNvciA9IGZhbHNlOwogICAgICAgIGdvdG8gZnJhbWVfZW5kOwogICAgfQoKICAgIHVwZGF0ZV91aSgpOwoKZnJhbWVfZW5kOgoKICAgIEltR3VpOjpFbmRGcmFtZSgpOwogICAgSW1HdWk6OlJlbmRlcigpOwp9CgpIUkVTVUxUIF9fc3RkY2FsbCBkM2Q5X3VwZGF0ZShJRGlyZWN0M0REZXZpY2U5ICpwRGV2aWNlKQp7CiAgICBpZiAoIWluaXQpCiAgICB7CiAgICAgICAgaW5pdCA9IHRydWU7CgogICAgICAgIGdfcHJvY2VzcyA9IEdldEN1cnJlbnRQcm9jZXNzKCk7CiAgICAgICAgZ19kM2Q5X2RldmljZSA9IHBEZXZpY2U7CgogICAgICAgIGluaXRfdWkocERldmljZSk7CiAgICAgICAgQ2xvc2VIYW5kbGUoQ3JlYXRlVGhyZWFkKDAsIDAsIChMUFRIUkVBRF9TVEFSVF9ST1VUSU5FKWluaXRfaG9va3MsIDAsIDAsIDApKTsKICAgIH0KCiAgICBJbUd1aV9JbXBsRFg5X05ld0ZyYW1lKCk7CiAgICBpbWd1aV9uZXdfZnJhbWUoKTsKICAgIEltR3VpX0ltcGxEWDlfUmVuZGVyRHJhd0RhdGEoSW1HdWk6OkdldERyYXdEYXRhKCkpOwoKICAgIHJldHVybiB3Z2xTd2FwQnVmZmVyc0dhdGV3YXkocERldmljZSk7Cn0KCl9fZGVjbHNwZWMobmFrZWQpIHZvaWQgb3BlbmdsX3VwZGF0ZSgpCnsKICAgIGlmICghaW5pdCkKICAgIHsKICAgICAgICBpbml0ID0gdHJ1ZTsKCiAgICAgICAgZ19wcm9jZXNzID0gR2V0Q3VycmVudFByb2Nlc3MoKTsKCiAgICAgICAgaERjID0gd2dsR2V0Q3VycmVudERDKCk7CiAgICAgICAgZ19od25kID0gV2luZG93RnJvbURDKGhEYyk7CgojaWZkZWYgRlJfTE9HX1RPX0NPTlNPTEUKICAgICAgICBBbGxvY0NvbnNvbGUoKTsKICAgICAgICBGSUxFICpmOwogICAgICAgIGZyZW9wZW5fcygmZiwgIkNPTk9VVCQiLCAidyIsIHN0ZG91dCk7CiAgICAgICAgZnJlb3Blbl9zKCZmLCAiQ09OT1VUJCIsICJ3Iiwgc3RkZXJyKTsKI2VuZGlmIC8vIEZSX0xPR19UT19DT05TT0xFCgogICAgICAgIGluaXRfdWkoKTsKICAgICAgICBDbG9zZUhhbmRsZShDcmVhdGVUaHJlYWQoMCwgMCwgKExQVEhSRUFEX1NUQVJUX1JPVVRJTkUpaW5pdF9ob29rcywgMCwgMCwgMCkpOwogICAgfQoKICAgIEltR3VpX0ltcGxPcGVuR0wzX05ld0ZyYW1lKCk7CiAgICBpbWd1aV9uZXdfZnJhbWUoKTsKICAgIEltR3VpX0ltcGxPcGVuR0wzX1JlbmRlckRyYXdEYXRhKEltR3VpOjpHZXREcmF3RGF0YSgpKTsKCiAgICBfX2FzbSB7CiAgICAgICAgam1wIFt3Z2xTd2FwQnVmZmVyc0dhdGV3YXldCiAgICB9Cn0KCnN0YXRpYyBpbmxpbmUgQk9PTCBDQUxMQkFDSyBFbnVtV2luZG93c0NhbGxiYWNrKEhXTkQgaGFuZGxlLCBMUEFSQU0gbFBhcmFtKQp7CiAgICBEV09SRCB3bmRQcm9jSWQgPSAwOwogICAgR2V0V2luZG93VGhyZWFkUHJvY2Vzc0lkKGhhbmRsZSwgJnduZFByb2NJZCk7CgogICAgaWYgKEdldEN1cnJlbnRQcm9jZXNzSWQoKSAhPSB3bmRQcm9jSWQpCiAgICAgICAgcmV0dXJuIFRSVUU7CgogICAgZ19od25kID0gaGFuZGxlOwogICAgcmV0dXJuIEZBTFNFOwp9CgpzdGF0aWMgaW5saW5lIEhXTkQgR2V0UHJvY2Vzc1dpbmRvdygpCnsKICAgIEVudW1XaW5kb3dzKEVudW1XaW5kb3dzQ2FsbGJhY2ssIE5VTEwpOwogICAgcmV0dXJuIGdfaHduZDsKfQoKc3RhdGljIGlubGluZSBib29sIEdldEQzRDlEZXZpY2Uodm9pZCAqKnBUYWJsZSwgc2l6ZV90IFNpemUpCnsKICAgIGlmICghcFRhYmxlKQogICAgICAgIHJldHVybiBmYWxzZTsKCiAgICBTaXplICo9IHNpemVvZih2b2lkICopOwoKICAgIEhNT0RVTEUgZDNkOSA9IEdldE1vZHVsZUhhbmRsZUEoImQzZDkuZGxsIik7CiAgICBEaXJlY3QzRENyZWF0ZTlUIGQzZDlfY3JlYXRlID0gKERpcmVjdDNEQ3JlYXRlOVQpR2V0UHJvY0FkZHJlc3MoZDNkOSwgIkRpcmVjdDNEQ3JlYXRlOSIpOwogICAgSURpcmVjdDNEOSAqcEQzRCA9IGQzZDlfY3JlYXRlKEQzRF9TREtfVkVSU0lPTik7CgogICAgaWYgKCFwRDNEKQogICAgICAgIHJldHVybiBmYWxzZTsKCiAgICBJRGlyZWN0M0REZXZpY2U5ICpwRHVtbXlEZXZpY2UgPSBOVUxMOwoKICAgIEQzRFBSRVNFTlRfUEFSQU1FVEVSUyBkM2RwcCA9IHt9OwogICAgZDNkcHAuV2luZG93ZWQgPSBmYWxzZTsKICAgIGQzZHBwLlN3YXBFZmZlY3QgPSBEM0RTV0FQRUZGRUNUX0RJU0NBUkQ7CiAgICBkM2RwcC5oRGV2aWNlV2luZG93ID0gR2V0UHJvY2Vzc1dpbmRvdygpOwoKICAgIEhSRVNVTFQgZHVtbXlEZXZpY2VDcmVhdGVkID0gcEQzRC0+Q3JlYXRlRGV2aWNlKEQzREFEQVBURVJfREVGQVVMVCwgRDNEREVWVFlQRV9IQUwsIGQzZHBwLmhEZXZpY2VXaW5kb3csIEQzRENSRUFURV9TT0ZUV0FSRV9WRVJURVhQUk9DRVNTSU5HLCAmZDNkcHAsICZwRHVtbXlEZXZpY2UpOwoKICAgIGlmIChkdW1teURldmljZUNyZWF0ZWQgIT0gU19PSykKICAgIHsKICAgICAgICBkM2RwcC5XaW5kb3dlZCA9IHRydWU7CiAgICAgICAgZHVtbXlEZXZpY2VDcmVhdGVkID0gcEQzRC0+Q3JlYXRlRGV2aWNlKEQzREFEQVBURVJfREVGQVVMVCwgRDNEREVWVFlQRV9IQUwsIGQzZHBwLmhEZXZpY2VXaW5kb3csIEQzRENSRUFURV9TT0ZUV0FSRV9WRVJURVhQUk9DRVNTSU5HLCAmZDNkcHAsICZwRHVtbXlEZXZpY2UpOwoKICAgICAgICBpZiAoZHVtbXlEZXZpY2VDcmVhdGVkICE9IFNfT0spCiAgICAgICAgewogICAgICAgICAgICBwRDNELT5SZWxlYXNlKCk7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CgogICAgbWVtY3B5KHBUYWJsZSwgKnJlaW50ZXJwcmV0X2Nhc3Q8dm9pZCAqKio+KHBEdW1teURldmljZSksIFNpemUpOwoKICAgIHBEdW1teURldmljZS0+UmVsZWFzZSgpOwogICAgcEQzRC0+UmVsZWFzZSgpOwogICAgcmV0dXJuIHRydWU7Cn0KCkRXT1JEIFdJTkFQSSBmcmVlZG9tX21haW4oSE1PRFVMRSBoTW9kdWxlKQp7CiAgICBnX21vZHVsZSA9IGhNb2R1bGU7CgogICAgU3dhcEJ1ZmZlcnNIb29rID0gSG9vazxUcmFtcG9saW5lMzI+KCJ3Z2xTd2FwQnVmZmVycyIsICJvcGVuZ2wzMi5kbGwiLCAoQllURSAqKW9wZW5nbF91cGRhdGUsIChCWVRFICopJndnbFN3YXBCdWZmZXJzR2F0ZXdheSwgNSk7CiAgICBTd2FwQnVmZmVyc0hvb2suc3JjICs9IDE0OwogICAgU3dhcEJ1ZmZlcnNIb29rLkVuYWJsZSgpOwoKICAgIC8vIE5PVEUoQ2lyZW11bik6IG9uZSBzZWNvbmQgaXMgZW5vdWdoLi4uIHJpZ2h0PwogICAgU2xlZXAoMTAwMCk7CgogICAgaWYgKCFpbml0KQogICAgewogICAgICAgIC8vIE5PVEUoQ2lyZW11bik6IENvbXBhdGliaWxpdHkgTW9kZQogICAgICAgIFN3YXBCdWZmZXJzSG9vay5EaXNhYmxlKCk7CiAgICAgICAgY29tcGF0aWJpbGl0eV9tb2RlID0gdHJ1ZTsKICAgICAgICBpZiAoR2V0RDNEOURldmljZSgodm9pZCAqKilwRGV2aWNlVGFibGUsIEQzRERFVjlfTEVOKSkKICAgICAgICB7CiAgICAgICAgICAgIHZvaWQgKnBFbmRTY2VuZSA9IHBEZXZpY2VUYWJsZVs0Ml07CiAgICAgICAgICAgIFN3YXBCdWZmZXJzSG9vayA9IEhvb2s8VHJhbXBvbGluZTMyPigoQllURSAqKXBFbmRTY2VuZSwgKEJZVEUgKilkM2Q5X3VwZGF0ZSwgKEJZVEUgKikmd2dsU3dhcEJ1ZmZlcnNHYXRld2F5LCA3KTsKICAgICAgICAgICAgU3dhcEJ1ZmZlcnNIb29rLkVuYWJsZSgpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMDsKfQoKQk9PTCBBUElFTlRSWSBEbGxNYWluKEhNT0RVTEUgaE1vZHVsZSwgRFdPUkQgdWxfcmVhc29uX2Zvcl9jYWxsLCBMUFZPSUQgbHBSZXNlcnZlZCkKewogICAgaWYgKHVsX3JlYXNvbl9mb3JfY2FsbCA9PSBETExfUFJPQ0VTU19BVFRBQ0gpCiAgICAgICAgQ2xvc2VIYW5kbGUoQ3JlYXRlVGhyZWFkKDAsIDAsIChMUFRIUkVBRF9TVEFSVF9ST1VUSU5FKWZyZWVkb21fbWFpbiwgaE1vZHVsZSwgMCwgMCkpOwogICAgcmV0dXJuIFRSVUU7Cn0K"
        },
        {
            "fileName": "encrypting-strings-at-compile-time.md",
            "src": "data:text/plain;base64,"
        },
        {
            "fileName": "hidden_remover.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgImZlYXR1cmVzL2hpZGRlbl9yZW1vdmVyLmgiCgpIb29rPFRyYW1wb2xpbmUzMj4gSGlkZGVuSG9vazsKdEhpZGRlbkhvb2sgb19ob21fdXBkYXRlX3ZhcnNfaGlkZGVuOwp1aW50cHRyX3QgaG9tX3VwZGF0ZV92YXJzX2NvZGVfc3RhcnQgPSAwOwp1aW50cHRyX3QgaG9tX3VwZGF0ZV92YXJzX2hpZGRlbl9sb2MgPSAwOwppbnQzMl90IGhvbV9tb2RzX29yaWdpbmFsX3ZhbHVlID0gMDsKCnZvaWQgaW5pdF91bm1vZF9oaWRkZW4oKQp7CiAgICBpZiAoaG9tX3VwZGF0ZV92YXJzX2hpZGRlbl9sb2MpCiAgICB7CiAgICAgICAgSGlkZGVuSG9vayA9IEhvb2s8VHJhbXBvbGluZTMyPihob21fdXBkYXRlX3ZhcnNfaGlkZGVuX2xvYyArIDB4NywgKEJZVEUgKiloa19ob21fdXBkYXRlX3ZhcnNfaGlkZGVuLCAoQllURSAqKSZvX2hvbV91cGRhdGVfdmFyc19oaWRkZW4sIDYpOwogICAgICAgIGlmIChjZmdfaGlkZGVuX3JlbW92ZXJfZW5hYmxlZCkKICAgICAgICAgICAgSGlkZGVuSG9vay5FbmFibGUoKTsKICAgIH0KfQoKdm9pZCB1bm1vZF9oaWRkZW5fb25fYmVhdG1hcF9sb2FkKCkKewogICAgaWYgKGNmZ19oaWRkZW5fcmVtb3Zlcl9lbmFibGVkICYmIG9zdV9tYW5hZ2VyX3B0cikKICAgIHsKICAgICAgICB1aW50cHRyX3Qgb3N1X21hbmFnZXIgPSAqKHVpbnRwdHJfdCAqKShvc3VfbWFuYWdlcl9wdHIpOwogICAgICAgIGlmIChvc3VfbWFuYWdlcikKICAgICAgICB7CiAgICAgICAgICAgIHVpbnRwdHJfdCBoaXRfbWFuYWdlcl9wdHIgPSAqKHVpbnRwdHJfdCAqKShvc3VfbWFuYWdlciArIE9TVV9NQU5BR0VSX0hJVF9NQU5BR0VSX09GRlNFVCk7CiAgICAgICAgICAgIHVpbnRwdHJfdCBtb2RzX3B0ciA9ICoodWludHB0cl90ICopKGhpdF9tYW5hZ2VyX3B0ciArIE9TVV9ISVRfTUFOQUdFUl9NT0RTX09GRlNFVCk7CiAgICAgICAgICAgICooaW50MzJfdCAqKShtb2RzX3B0ciArIDB4MEMpID0gaG9tX21vZHNfb3JpZ2luYWxfdmFsdWU7CiAgICAgICAgICAgIGhvbV9tb2RzX29yaWdpbmFsX3ZhbHVlID0gMDsKICAgICAgICB9CiAgICB9Cn0KCnZvaWQgZW5hYmxlX2hpZGRlbl9yZW1vdmVyX2hvb2tzKCkKewogICAgZW5hYmxlX25vdGlmeV9ob29rcygpOwogICAgSGlkZGVuSG9vay5FbmFibGUoKTsKfQoKdm9pZCBkaXNhYmxlX2hpZGRlbl9yZW1vdmVyX2hvb2tzKCkKewogICAgZGlzYWJsZV9ub3RpZnlfaG9va3MoKTsKICAgIEhpZGRlbkhvb2suRGlzYWJsZSgpOwp9CgpfX2RlY2xzcGVjKG5ha2VkKSB2b2lkIGhrX2hvbV91cGRhdGVfdmFyc19oaWRkZW4oKQp7CiAgICBfX2FzbSB7CiAgICAgICAgcHVzaCBlYXgKICAgICAgICBwdXNoIGVieAogICAgICAgIHB1c2ggZWR4CiAgICAgICAgbW92IGVheCwgW2VjeCtPU1VfSElUX01BTkFHRVJfTU9EU19PRkZTRVRdCiAgICAgICAgbW92IGVieCwgW2VheCsweDhdCiAgICAgICAgbW92IGVkeCwgW2VheCsweENdCiAgICAgICAgbW92IGhvbV9tb2RzX29yaWdpbmFsX3ZhbHVlLCBlZHgKICAgICAgICB4b3IgZWR4LCBlYngKICAgICAgICBhbmQgZWR4LCAtMHg5CiAgICAgICAgeG9yIGVkeCwgZWJ4CiAgICAgICAgbW92IFtlYXgrMHhDXSwgZWR4CiAgICAgICAgcG9wIGVkeAogICAgICAgIHBvcCBlYngKICAgICAgICBwb3AgZWF4CiAgICAgICAgam1wIG9faG9tX3VwZGF0ZV92YXJzX2hpZGRlbgogICAgfQp9Cg=="
        },
        {
            "fileName": "hook.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgImhvb2suaCIKCmJvb2wgZGV0b3VyXzMyKEJZVEUgKnNyYywgQllURSAqZHN0LCBjb25zdCB1aW50cHRyX3QgbGVuKQp7CiAgICBpZiAobGVuIDwgNSkKICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgRFdPUkQgY3VyUHJvdGVjdGlvbjsKICAgIFZpcnR1YWxQcm90ZWN0KHNyYywgbGVuLCBQQUdFX0VYRUNVVEVfUkVBRFdSSVRFLCAmY3VyUHJvdGVjdGlvbik7CgogICAgbWVtc2V0KHNyYywgMHg5MCwgbGVuKTsKCiAgICB1aW50cHRyX3QgcmVsYXRpdmVBZGRyZXNzID0gZHN0IC0gc3JjIC0gNTsKICAgICpzcmMgPSAweEU5OwogICAgKih1aW50cHRyX3QgKikoc3JjICsgMSkgPSByZWxhdGl2ZUFkZHJlc3M7CgogICAgVmlydHVhbFByb3RlY3Qoc3JjLCBsZW4sIGN1clByb3RlY3Rpb24sICZjdXJQcm90ZWN0aW9uKTsKICAgIHJldHVybiB0cnVlOwp9CgpCWVRFICp0cmFtcG9saW5lXzMyKEJZVEUgKnNyYywgQllURSAqZHN0LCBjb25zdCB1aW50cHRyX3QgbGVuKQp7CiAgICBpZiAobGVuIDwgNSkKICAgICAgICByZXR1cm4gMDsKCiAgICBCWVRFICpnYXRld2F5ID0gKEJZVEUgKilWaXJ0dWFsQWxsb2MoMCwgbGVuLCBNRU1fQ09NTUlUIHwgTUVNX1JFU0VSVkUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUEFHRV9FWEVDVVRFX1JFQURXUklURSk7CgogICAgbWVtY3B5X3MoZ2F0ZXdheSwgbGVuLCBzcmMsIGxlbik7CgogICAgdWludHB0cl90IGdhdGV3YXlSZWxhdGl2ZUFkZHIgPSBzcmMgLSBnYXRld2F5IC0gNTsKICAgICooZ2F0ZXdheSArIGxlbikgPSAweEU5OwogICAgKih1aW50cHRyX3QgKikoKHVpbnRwdHJfdClnYXRld2F5ICsgbGVuICsgMSkgPSBnYXRld2F5UmVsYXRpdmVBZGRyOwoKICAgIGRldG91cl8zMihzcmMsIGRzdCwgbGVuKTsKCiAgICByZXR1cm4gZ2F0ZXdheTsKfQo="
        },
        {
            "fileName": "InputHandler.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgIklucHV0SGFuZGxlci5ocHAiCgojaW5jbHVkZSA8aW9zdHJlYW0+CiNpbmNsdWRlIDxmc3RyZWFtPgoKaW50IERMTF9JbmplY3Rvcjo6SGFuZGxlSW5wdXQoaW50IGFyZ2MsIGNoYXIqIGFyZ3ZbXSwgSW5qZWN0aW9uRGF0YSYgZGF0YSkKewoJaWYgKGFyZ2MgPCAzKQoJewoJCXN0ZDo6Y291dAoJCQk8PCAiRVJST1I6IEluc3VmZmljaWVudCBudW1iZXIgb2YgYXJndW1lbnRzLlxuIgoJCQk8PCAiVVNBR0U6ICIgPDwgYXJndltDT01NQU5EXSA8PCAiIFtwcm9jZXNzIG5hbWVdIFtkbGwgcGF0aF1cbiIKCQkJPDwgIkVYQU1QTEU6ICIgPDwgYXJndltDT01NQU5EXSA8PCAiIE5vdGVwYWQuZXhlIEM6L0RMTHMvRXhhbXBsZS5kbGwiIDw8IHN0ZDo6ZW5kbDsKCgkJcmV0dXJuIC0xOwoJfQoKCS8vIEdldCBwcm9jZXNzIG5hbWUgYW5kIElELgoJZGF0YS5wcm9jTmFtZSA9IGFyZ3ZbUFJPQ0VTU19OQU1FXTsKCWRhdGEucHJvY0lEID0gRExMX0luamVjdG9yOjpHZXRQcm9jZXNzSUQoZGF0YS5wcm9jTmFtZS5jX3N0cigpKTsKCglpZiAoIWRhdGEucHJvY0lEKQoJewoJCXN0ZDo6Y291dAoJCQk8PCAiRVJST1I6IENvdWxkbid0IGZpbmQgXCIiIDw8IGRhdGEucHJvY05hbWUgPDwgIlwiIHByb2Nlc3MuICIKCQkJPDwgIk1ha2Ugc3VyZSB0aGF0IHRoZSBwcm9jZXNzIGlzIHJ1bm5pbmcgYW5kIHRoYXQgdGhlIGVudGVyZWQgbmFtZSBpcyBjb3JyZWN0LiAiCgkJCTw8ICJQcm9jZXNzIG5hbWVzIGFyZSBjYXNlIHNlbnNpdGl2ZS4iIDw8IHN0ZDo6ZW5kbDsKCgkJcmV0dXJuIC0xOwoJfQoKCS8vIEdldCBETEwgZmlsZXBhdGguCglkYXRhLmRsbFBhdGggPSAiIjsKCWZvciAoaW50IGkgPSBETExfRklMRVBBVEhfU1RBUlQ7IGkgPCBhcmdjOyBpKyspCgl7CgkJaWYgKGkgIT0gRExMX0ZJTEVQQVRIX1NUQVJUKQoJCQlkYXRhLmRsbFBhdGggKz0gIiAiOwoKCQlkYXRhLmRsbFBhdGggKz0gYXJndltpXTsKCX0KCgkvLyBDaGVjayBpZiB0aGUgZmlsZSBleGlzdHMuCglzdGQ6Omlmc3RyZWFtIGZpbGUoZGF0YS5kbGxQYXRoKTsKCWlmICghZmlsZS5nb29kKCkpCgl7CgkJc3RkOjpjb3V0CgkJCTw8ICJFUlJPUjogQ291bGRuJ3QgZmluZCB0aGUgRExMIGZpbGUgYXQgXCIiIDw8IGRhdGEuZGxsUGF0aCA8PCAiXCIuICIKCQkJPDwgIk1ha2Ugc3VyZSB5b3UndmUgZW50ZXJlZCB0aGUgY29ycmVjdCBwYXRoLiIgPDwgc3RkOjplbmRsOwoKCQlyZXR1cm4gLTE7Cgl9CgoJcmV0dXJuIDA7Cn0K"
        },
        {
            "fileName": "InputHandler.hpp",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiUHJvY2Vzcy5ocHAiCgpuYW1lc3BhY2UgRExMX0luamVjdG9yCnsKCWVudW0gQ09OU09MRV9QQVJBTVMKCXsKCQlDT01NQU5EICAgICAgICAgICAgPSAwLAoJCVBST0NFU1NfTkFNRSAgICAgICA9IDEsCgkJRExMX0ZJTEVQQVRIX1NUQVJUID0gMgoJfTsKCglpbnQgSGFuZGxlSW5wdXQoaW50IGFyZ2MsIGNoYXIqIGFyZ3ZbXSwgSW5qZWN0aW9uRGF0YSYgZGF0YSk7Cgp9IC8vIG5hbWVzcGFjZSBETExfSW5qZWN0b3IK"
        },
        {
            "fileName": "Process.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgIlByb2Nlc3MuaHBwIgoKI2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8V2luZG93cy5oPgojaW5jbHVkZSA8VGxIZWxwMzIuaD4KCkRXT1JEIERMTF9JbmplY3Rvcjo6R2V0UHJvY2Vzc0lEKGNvbnN0IGNoYXIqIHByb2NOYW1lKQp7CglIQU5ETEUgc25hcHNob3QgPSBDcmVhdGVUb29saGVscDMyU25hcHNob3QoVEgzMkNTX1NOQVBQUk9DRVNTLCAwKTsKCWlmIChzbmFwc2hvdCA9PSBJTlZBTElEX0hBTkRMRV9WQUxVRSkKCQlyZXR1cm4gMDsKCglQUk9DRVNTRU5UUlkzMiBwcm9jRW50cnk7Cglwcm9jRW50cnkuZHdTaXplID0gc2l6ZW9mKFBST0NFU1NFTlRSWTMyKTsKCglEV09SRCBwaWQgPSAwOwoJYm9vbCByZXN1bHQgPSBQcm9jZXNzMzJGaXJzdChzbmFwc2hvdCwgJnByb2NFbnRyeSk7CgoJd2hpbGUgKHJlc3VsdCkKCXsKCQlzaXplX3QgaTsKCQljaGFyIGN1cnJlbnRQcm9jTmFtZVtNQVhfUEFUSF07CgkJd2NzdG9tYnNfcygmaSwgY3VycmVudFByb2NOYW1lLCBNQVhfUEFUSCwgcHJvY0VudHJ5LnN6RXhlRmlsZSwgTUFYX1BBVEggLSAxKTsKCgkJaWYgKHN0cmNtcChwcm9jTmFtZSwgY3VycmVudFByb2NOYW1lKSA9PSAwKQoJCXsKCQkJcGlkID0gcHJvY0VudHJ5LnRoMzJQcm9jZXNzSUQ7CgkJCWJyZWFrOwoJCX0KCgkJcmVzdWx0ID0gUHJvY2VzczMyTmV4dChzbmFwc2hvdCwgJnByb2NFbnRyeSk7Cgl9CgoJQ2xvc2VIYW5kbGUoc25hcHNob3QpOwoJcmV0dXJuIHBpZDsKfQoKaW50IERMTF9JbmplY3Rvcjo6SW5qZWN0RExMKEluamVjdGlvbkRhdGEmIGRhdGEpCnsKCUZBUlBST0MgTG9hZExpYnJhcnlBUHJvYyA9IEdldFByb2NBZGRyZXNzKAoJCUdldE1vZHVsZUhhbmRsZShURVhUKCJrZXJuZWwzMi5kbGwiKSksCgkJIkxvYWRMaWJyYXJ5QSIKCSk7CgoJaWYgKExvYWRMaWJyYXJ5QVByb2MgPT0gTlVMTCkKCXsKCQlzdGQ6OmNvdXQKCQkJPDwgIkVSUk9SOiBDb3VsZG4ndCBnZXQgTG9hZExpYnJhcnlBIGFkZHJlc3MuICIKCQkJPDwgIkdldExhc3RFcnJvcigpIHJldHVybmVkICIgPDwgR2V0TGFzdEVycm9yKCkgPDwgIi4iIDw8IHN0ZDo6ZW5kbDsKCgkJcmV0dXJuIC0xOwoJfQoKCUhBTkRMRSBwcm9jSGFuZGxlID0gT3BlblByb2Nlc3MoCgkJUFJPQ0VTU19BTExfQUNDRVNTLAoJCUZBTFNFLAoJCWRhdGEucHJvY0lECgkpOwoKCWlmIChwcm9jSGFuZGxlID09IE5VTEwpCgl7CgkJc3RkOjpjb3V0CgkJCTw8ICJFUlJPUjogT3BlblByb2Nlc3MoKSBmYWlsZWQuICIKCQkJPDwgIkdldExhc3RFcnJvcigpIHJldHVybmVkICIgPDwgR2V0TGFzdEVycm9yKCkgPDwgIi4gIgoJCQk8PCAiSXMgdGhlIHByb2Nlc3MgcnVubmluZyBhcyBhZG1pbmlzdHJhdG9yPyBDb25zaWRlciBleGVjdXRpbmcgdGhpcyBjb21tYW5kIGFzIGFkbWluaXN0cmF0b3IuIgoJCQk8PCBzdGQ6OmVuZGw7CgoJCXJldHVybiAtMTsKCX0KCgkvLyBDaGVjayBpZiB0aGUgcHJvY2VzcyBpcyBhIDY0IGJpdCBhcHBsaWNhdGlvbi4KCUlzV293NjRQcm9jZXNzKHByb2NIYW5kbGUsICZkYXRhLmlzWDY0KTsKCglMUFZPSUQgcmVtb3RlQnVmZiA9IFZpcnR1YWxBbGxvY0V4KHByb2NIYW5kbGUsIE5VTEwsIGRhdGEuZGxsUGF0aC5sZW5ndGgoKSwgTUVNX0NPTU1JVCwgUEFHRV9SRUFEV1JJVEUpOwoJaWYgKHJlbW90ZUJ1ZmYgPT0gTlVMTCkKCXsKCQlzdGQ6OmNvdXQKCQkJPDwgIkVSUk9SOiBWaXJ0dWFsQWxsb2NFeCgpIGZhaWxlZC4gIgoJCQk8PCAiR2V0TGFzdEVycm9yKCkgcmV0dXJuZWQgIiA8PCBHZXRMYXN0RXJyb3IoKSA8PCAiLiIgPDwgc3RkOjplbmRsOwoKCQlDbG9zZUhhbmRsZShwcm9jSGFuZGxlKTsKCQlyZXR1cm4gLTE7Cgl9CgoJaWYgKCFXcml0ZVByb2Nlc3NNZW1vcnkocHJvY0hhbmRsZSwgcmVtb3RlQnVmZiwgZGF0YS5kbGxQYXRoLmNfc3RyKCksIGRhdGEuZGxsUGF0aC5sZW5ndGgoKSwgTlVMTCkpCgl7CgkJc3RkOjpjb3V0CgkJCTw8ICJFUlJPUjogV3JpdGVQcm9jZXNzTWVtb3J5KCkgZmFpbGVkLiAiCgkJCTw8ICJHZXRMYXN0RXJyb3IoKSByZXR1cm5lZCAiIDw8IEdldExhc3RFcnJvcigpIDw8ICIuIiA8PCBzdGQ6OmVuZGw7CgoJCVZpcnR1YWxGcmVlRXgocHJvY0hhbmRsZSwgcmVtb3RlQnVmZiwgMCwgTUVNX1JFTEVBU0UpOwoJCUNsb3NlSGFuZGxlKHByb2NIYW5kbGUpOwoJCXJldHVybiAtMTsKCX0KCglIQU5ETEUgdGhyZWFkID0gQ3JlYXRlUmVtb3RlVGhyZWFkKHByb2NIYW5kbGUsIE5VTEwsIE5VTEwsIChMUFRIUkVBRF9TVEFSVF9ST1VUSU5FKUxvYWRMaWJyYXJ5QVByb2MsIHJlbW90ZUJ1ZmYsIE5VTEwsIE5VTEwpOwoJaWYgKCF0aHJlYWQpCgl7CgkJc3RkOjpjb3V0CgkJCTw8ICJFUlJPUjogQ3JlYXRlUmVtb3RlVGhyZWFkKCkgZmFpbGVkLiAiCgkJCTw8ICJHZXRMYXN0RXJyb3IoKSByZXR1cm5lZCAiIDw8IEdldExhc3RFcnJvcigpIDw8ICIuIiA8PCBzdGQ6OmVuZGw7CgoJCVZpcnR1YWxGcmVlRXgocHJvY0hhbmRsZSwgcmVtb3RlQnVmZiwgMCwgTUVNX1JFTEVBU0UpOwoJCUNsb3NlSGFuZGxlKHByb2NIYW5kbGUpOwoJCXJldHVybiAtMTsKCX0KCglXYWl0Rm9yU2luZ2xlT2JqZWN0KHRocmVhZCwgSU5GSU5JVEUpOwoJQ2xvc2VIYW5kbGUodGhyZWFkKTsKCglWaXJ0dWFsRnJlZUV4KHByb2NIYW5kbGUsIHJlbW90ZUJ1ZmYsIDAsIE1FTV9SRUxFQVNFKTsKCUNsb3NlSGFuZGxlKHByb2NIYW5kbGUpOwoKCXN0ZDo6Y291dCA8PCAiRExMIHN1Y2Nlc2Z1bGx5IGluamVjdGVkLiIgPDwgc3RkOjplbmRsOwoKCXJldHVybiAwOwp9Cg=="
        },
        {
            "fileName": "Process.hpp",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgojaW5jbHVkZSA8c3RyaW5nPgojaW5jbHVkZSA8V2luZG93cy5oPgoKbmFtZXNwYWNlIERMTF9JbmplY3Rvcgp7CglzdHJ1Y3QgSW5qZWN0aW9uRGF0YQoJewoJCURXT1JEIHByb2NJRDsKCQlzdGQ6OnN0cmluZyBwcm9jTmFtZTsKCQlCT09MIGlzWDY0OwoKCQlzdGQ6OnN0cmluZyBkbGxQYXRoOwoJfTsKCglEV09SRCBHZXRQcm9jZXNzSUQoY29uc3QgY2hhciogcHJvY05hbWUpOwoJaW50IEluamVjdERMTChJbmplY3Rpb25EYXRhJiBkYXRhKTsKCn0gLy8gbmFtZXNwYWNlIERMTF9JbmplY3Rvcgo="
        },
        {
            "fileName": "relax.cpp",
            "src": "data:text/markdown;base64,I2luY2x1ZGUgImZlYXR1cmVzL3JlbGF4LmgiCiNpbmNsdWRlICJ3aW5kb3cuaCIKCmZsb2F0IG9kX3dpbmRvdyA9IDUuZjsKZmxvYXQgb2Rfd2luZG93X2xlZnRfb2Zmc2V0ID0gLjBmOwpmbG9hdCBvZF93aW5kb3dfcmlnaHRfb2Zmc2V0ID0gLjBmOwpmbG9hdCBvZF9jaGVja19tcyA9IC4wZjsKCmZsb2F0IGp1bXBpbmdfd2luZG93X29mZnNldCA9IC4wZjsKCmludCB3YWl0X2hpdG9iamVjdHNfbWluID0gMTA7CmludCB3YWl0X2hpdG9iamVjdHNfbWF4ID0gMjU7Cgpib29sIGRlYnVnX3JlbGF4ID0gZmFsc2U7CgpzdGF0aWMgY2hhciBjdXJyZW50X2NsaWNrID0gY2ZnX3JlbGF4X3N0eWxlID09ICdhJyA/IHJpZ2h0X2NsaWNrWzBdIDogbGVmdF9jbGlja1swXTsKCnZvaWQgY2FsY19vZF90aW1pbmcoKQp7CiAgICBzdGF0aWMgY29uc3QgYXV0byByYW5kX3JhbmdlX2YgPSBbXShmbG9hdCBmX21pbiwgZmxvYXQgZl9tYXgpIC0+IGZsb2F0CiAgICB7CiAgICAgICAgZmxvYXQgc2NhbGUgPSByYW5kKCkgLyAoZmxvYXQpUkFORF9NQVg7CiAgICAgICAgcmV0dXJuIGZfbWluICsgc2NhbGUgKiAoZl9tYXggLSBmX21pbik7CiAgICB9OwogICAgc3RhdGljIGNvbnN0IGF1dG8gcmFuZF9yYW5nZV9pID0gW10oaW50IGlfbWluLCBpbnQgaV9tYXgpIC0+IGludAogICAgewogICAgICAgIHJldHVybiByYW5kKCkgJSAoaV9tYXggKyAxIC0gaV9taW4pICsgaV9taW47CiAgICB9OwogICAgaWYgKGNmZ19yZWxheF9jaGVja3Nfb2QgJiYgKG9kX2NoZWNrX21zID09IC4wZikpCiAgICB7CiAgICAgICAgb2RfY2hlY2tfbXMgPSByYW5kX3JhbmdlX2Yob2Rfd2luZG93X2xlZnRfb2Zmc2V0LCBvZF93aW5kb3dfcmlnaHRfb2Zmc2V0KTsKICAgICAgICBpZiAoY2ZnX2p1bXBpbmdfd2luZG93KQogICAgICAgIHsKICAgICAgICAgICAgc3RhdGljIHVpbnQzMl90IGhpdF9vYmplY3RzX3Bhc3NlZCA9IGN1cnJlbnRfYmVhdG1hcC5oaXRfb2JqZWN0X2lkeDsKICAgICAgICAgICAgc3RhdGljIGludCB3YWl0X2hpdG9qZWN0c19jb3VudCA9IHJhbmRfcmFuZ2VfaSh3YWl0X2hpdG9iamVjdHNfbWluLCB3YWl0X2hpdG9iamVjdHNfbWF4KTsKICAgICAgICAgICAgaWYgKGN1cnJlbnRfYmVhdG1hcC5oaXRfb2JqZWN0X2lkeCAtIGhpdF9vYmplY3RzX3Bhc3NlZCA+PSB3YWl0X2hpdG9qZWN0c19jb3VudCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgLy8gTk9URShDaXJlbXVuKTogbW92ZSBvZCB3aW5kb3cgdG8gdGhlIGxlZnQKICAgICAgICAgICAgICAgIGlmIChyYW5kX3JhbmdlX2koMCwgMSkgPj0gMSkKICAgICAgICAgICAgICAgICAgICBqdW1waW5nX3dpbmRvd19vZmZzZXQgPSByYW5kX3JhbmdlX2YoLjEzMzdmLCBvZF93aW5kb3cgLSBvZF93aW5kb3dfbGVmdF9vZmZzZXQpOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGp1bXBpbmdfd2luZG93X29mZnNldCA9IC1yYW5kX3JhbmdlX2YoLjEzMzdmLCBvZF93aW5kb3dfcmlnaHRfb2Zmc2V0KTsKICAgICAgICAgICAgICAgIGhpdF9vYmplY3RzX3Bhc3NlZCA9IGN1cnJlbnRfYmVhdG1hcC5oaXRfb2JqZWN0X2lkeDsKICAgICAgICAgICAgICAgIHdhaXRfaGl0b2plY3RzX2NvdW50ID0gcmFuZF9yYW5nZV9pKHdhaXRfaGl0b2JqZWN0c19taW4sIHdhaXRfaGl0b2JqZWN0c19tYXgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9kX2NoZWNrX21zICs9IGp1bXBpbmdfd2luZG93X29mZnNldDsKICAgICAgICB9CiAgICB9Cn0KClZlY3RvcjI8ZmxvYXQ+IG1vdXNlX3Bvc2l0aW9uKCkKewogICAgVmVjdG9yMjxmbG9hdD4gbW91c2VfcG9zOwogICAgdWludHB0cl90IG9zdV9tYW5hZ2VyID0gKih1aW50cHRyX3QgKikob3N1X21hbmFnZXJfcHRyKTsKICAgIHVpbnRwdHJfdCBvc3VfcnVsZXNldF9wdHIgPSAqKHVpbnRwdHJfdCAqKShvc3VfbWFuYWdlciArIE9TVV9NQU5BR0VSX1JVTEVTRVRfUFRSX09GRlNFVCk7CiAgICBtb3VzZV9wb3MueCA9ICooZmxvYXQgKikob3N1X3J1bGVzZXRfcHRyICsgT1NVX1JVTEVTRVRfTU9VU0VfWF9PRkZTRVQpOwogICAgbW91c2VfcG9zLnkgPSAqKGZsb2F0ICopKG9zdV9ydWxlc2V0X3B0ciArIE9TVV9SVUxFU0VUX01PVVNFX1lfT0ZGU0VUKTsKCiAgICByZXR1cm4gbW91c2VfcG9zOwp9Cgp2b2lkIHVwZGF0ZV9yZWxheChDaXJjbGUgJmNpcmNsZSwgY29uc3QgaW50MzJfdCBhdWRpb190aW1lKQp7CiAgICBzdGF0aWMgZG91YmxlIGtleWRvd25fdGltZSA9IDAuMDsKICAgIHN0YXRpYyBkb3VibGUga2V5dXBfZGVsYXkgPSAwLjA7CgogICAgaWYgKGNmZ19yZWxheF9sb2NrKQogICAgewogICAgICAgIGNhbGNfb2RfdGltaW5nKCk7CgogICAgICAgIGF1dG8gY3VycmVudF90aW1lID0gYXVkaW9fdGltZSArIG9kX2NoZWNrX21zOwogICAgICAgIGF1dG8gdmFsaWRfdGltaW5nID0gY3VycmVudF90aW1lID49IGNpcmNsZS5zdGFydF90aW1lOwogICAgICAgIGF1dG8gbW91c2VfcG9zID0gbW91c2VfcG9zaXRpb24oKTsKICAgICAgICBWZWN0b3IyIHNjcmVlbl9wb3MgPSBwbGF5ZmllbGRfdG9fc2NyZWVuKGNpcmNsZS5wb3NpdGlvbik7CiAgICAgICAgYXV0byBzY2FsYXJfZGlzdCA9IHNxcnQoKG1vdXNlX3Bvcy54IC0gc2NyZWVuX3Bvcy54KSAqIChtb3VzZV9wb3MueCAtIHNjcmVlbl9wb3MueCkgKyAobW91c2VfcG9zLnkgLSBzY3JlZW5fcG9zLnkpICogKG1vdXNlX3Bvcy55IC0gc2NyZWVuX3Bvcy55KSk7CiAgICAgICAgYXV0byB2YWxpZF9wb3NpdGlvbiA9IHNjYWxhcl9kaXN0IDw9IGN1cnJlbnRfYmVhdG1hcC5zY2FsZWRfaGl0X29iamVjdF9yYWRpdXM7CgogICAgICAgIGlmIChkZWJ1Z19yZWxheCkKICAgICAgICB7CiAgICAgICAgICAgIEltR3VpOjpHZXRCYWNrZ3JvdW5kRHJhd0xpc3QoKS0+QWRkQ2lyY2xlRmlsbGVkKAogICAgICAgICAgICBJbVZlYzIoc2NyZWVuX3Bvcy54LCBzY3JlZW5fcG9zLnkpLAogICAgICAgICAgICBjdXJyZW50X2JlYXRtYXAuc2NhbGVkX2hpdF9vYmplY3RfcmFkaXVzLAogICAgICAgICAgICBJbUNvbG9yKCAwLCAyNTUsIDI1NSwgMTAwICkgKTsKICAgICAgICB9CgogICAgICAgIGlmICh2YWxpZF90aW1pbmcgLyogJiYgdmFsaWRfcG9zaXRpb24gKi8pCiAgICAgICAgewogICAgICAgICAgICBpZiAoIWNpcmNsZS5jbGlja2VkKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoY2ZnX3JlbGF4X3N0eWxlID09ICdhJykKICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2NsaWNrID0gY3VycmVudF9jbGljayA9PSBsZWZ0X2NsaWNrWzBdID8gcmlnaHRfY2xpY2tbMF0gOiBsZWZ0X2NsaWNrWzBdOwoKICAgICAgICAgICAgICAgIHNlbmRfa2V5Ym9hcmRfaW5wdXQoY3VycmVudF9jbGljaywgMCk7CiAgICAgICAgICAgICAgICBGUl9JTkZPX0ZNVCgiUmVsYXggaGl0ICVkISwgJWQgJWQiLCBjdXJyZW50X2JlYXRtYXAuaGl0X29iamVjdF9pZHgsIGNpcmNsZS5zdGFydF90aW1lLCBjaXJjbGUuZW5kX3RpbWUpOwogICAgICAgICAgICAgICAga2V5dXBfZGVsYXkgPSBjaXJjbGUuZW5kX3RpbWUgPyBjaXJjbGUuZW5kX3RpbWUgLSBjaXJjbGUuc3RhcnRfdGltZSA6IDAuNTsKCiAgICAgICAgICAgICAgICBpZiAoY2ZnX3RpbWV3YXJwX2VuYWJsZWQpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZG91YmxlIHRpbWV3YXJwX3BsYXliYWNrX3JhdGVfZGl2XzEwMCA9IGNmZ190aW1ld2FycF9wbGF5YmFja19yYXRlIC8gMTAwLjA7CiAgICAgICAgICAgICAgICAgICAga2V5dXBfZGVsYXkgLz0gdGltZXdhcnBfcGxheWJhY2tfcmF0ZV9kaXZfMTAwOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoY2lyY2xlLnR5cGUgPT0gSGl0T2JqZWN0VHlwZTo6U2xpZGVyIHx8IGNpcmNsZS50eXBlID09IEhpdE9iamVjdFR5cGU6OlNwaW5uZXIpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfYmVhdG1hcC5tb2RzICYgTW9kczo6RG91YmxlVGltZSkKICAgICAgICAgICAgICAgICAgICAgICAga2V5dXBfZGVsYXkgLz0gMS41OwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRfYmVhdG1hcC5tb2RzICYgTW9kczo6SGFsZlRpbWUpCiAgICAgICAgICAgICAgICAgICAgICAgIGtleXVwX2RlbGF5IC89IDAuNzU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBrZXlkb3duX3RpbWUgPSBJbUd1aTo6R2V0VGltZSgpOwogICAgICAgICAgICAgICAgY2lyY2xlLmNsaWNrZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgb2RfY2hlY2tfbXMgPSAuMGY7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAoY2ZnX3JlbGF4X2xvY2sgJiYga2V5ZG93bl90aW1lICYmICgoSW1HdWk6OkdldFRpbWUoKSAtIGtleWRvd25fdGltZSkgKiAxMDAwLjAgPiBrZXl1cF9kZWxheSkpCiAgICB7CiAgICAgICAga2V5ZG93bl90aW1lID0gMC4wOwogICAgICAgIHNlbmRfa2V5Ym9hcmRfaW5wdXQoY3VycmVudF9jbGljaywgS0VZRVZFTlRGX0tFWVVQKTsKICAgIH0KfQoKdm9pZCByZWxheF9vbl9iZWF0bWFwX2xvYWQoKQp7CiAgICBjdXJyZW50X2NsaWNrID0gY2ZnX3JlbGF4X3N0eWxlID09ICdhJyA/IHJpZ2h0X2NsaWNrWzBdIDogbGVmdF9jbGlja1swXTsKfQo="
        },
        {
            "fileName": "relax.h",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgojaW5jbHVkZSAiY29uZmlnLmgiCgpleHRlcm4gZmxvYXQgb2Rfd2luZG93OwpleHRlcm4gZmxvYXQgb2Rfd2luZG93X2xlZnRfb2Zmc2V0OwpleHRlcm4gZmxvYXQgb2Rfd2luZG93X3JpZ2h0X29mZnNldDsKZXh0ZXJuIGZsb2F0IG9kX2NoZWNrX21zOwoKZXh0ZXJuIGZsb2F0IGp1bXBpbmdfd2luZG93X29mZnNldDsKCmV4dGVybiBpbnQgd2FpdF9oaXRvYmplY3RzX21pbjsKZXh0ZXJuIGludCB3YWl0X2hpdG9iamVjdHNfbWF4OwoKZXh0ZXJuIGJvb2wgZGVidWdfcmVsYXg7Cgp2b2lkIHJlbGF4X29uX2JlYXRtYXBfbG9hZCgpOwp2b2lkIHVwZGF0ZV9yZWxheChDaXJjbGUgJmNpcmNsZSwgY29uc3QgaW50MzJfdCBhdWRpb190aW1lKTsK"
        },
        {
            "fileName": "signatures.h",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgojaW5jbHVkZSA8c3RkaW50Lmg+CgojaW5jbHVkZSAicGF0dGVybi5oIgoKY29uc3RleHByIGF1dG8gcGFyc2VfYmVhdG1hcF9mdW5jX3NpZyAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA1NyA1NiA1MyA4MSBFQyA1OCAwMSAwMCAwMCA4QiBGMSA4RCBCRCBCOCBGRSBGRiBGRiBCOSA0RSAwMCAwMCAwMCAzMyBDMCBGMyBBQiA4QiBDRSA4OSA4RCBCMCBGRSBGRiBGRiI+IH07CmNvbnN0ZXhwciBhdXRvIGN1cnJlbnRfc2NlbmVfZnVuY19zaWcgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiNTUgOEIgRUMgNTcgNTYgNTMgNTAgOEIgRDkgODMgM0QiPiB9Owpjb25zdGV4cHIgYXV0byBiZWF0bWFwX29ubG9hZF9mdW5jX3NpZyAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjU1IDhCIEVDIDU3IDU2IDUzIDgzIEVDIDQ0IDhCIEYxIEI5Ij4gfTsKY29uc3RleHByIGF1dG8gc2VsZWN0ZWRfc29uZ19mdW5jX3NpZyAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA4MyBFNCBGOCA1NyA1NiA4MyBFQyAzOCA4MyAzRCI+IH07CmNvbnN0ZXhwciBhdXRvIGF1ZGlvX3RpbWVfZnVuY19zaWcgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiNTUgOEIgRUMgODMgRTQgRjggNTcgNTYgODMgRUMgMzggODMgM0QiPiB9Owpjb25zdGV4cHIgYXV0byBvc3VfbWFuYWdlcl9mdW5jX3NpZyAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjU1IDhCIEVDIDU3IDU2IDUzIDgzIEVDIDE0IDgwIDNEIj4gfTsKY29uc3RleHByIGF1dG8gYmluZGluZ19tYW5hZ2VyX2Z1bmNfc2lnICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA1NyA1NiA4MyBFQyA1OCA4QiBGMSA4RCA3RCBBMCI+IH07CmNvbnN0ZXhwciBhdXRvIHNlbGVjdGVkX3JlcGxheV9mdW5jX3NpZyAgICAgeyBwYXR0ZXJuOjpidWlsZDwiNTUgOEIgRUMgNTcgNTYgNTMgODEgRUMgQTAgMDAgMDAgMDAgOEIgRjEgOEQgQkQgNjggRkYgRkYgRkYgQjkgMjIgMDAgMDAgMDAgMzMgQzAgRjMgQUIgOEIgQ0UgOEIgRjEgOEQgN0QgRTAiPiB9Owpjb25zdGV4cHIgYXV0byB3aW5kb3dfbWFuYWdlcl9mdW5jX3NpZyAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjU3IDU2IDUzIDgzIEVDIDZDIDhCIEYxIDhEIDdEIEE4IEI5IDEyIDAwIDAwIDAwIDMzIEMwIEYzIEFCIDhCIENFIDg5IDREIDk0Ij4gfTsKY29uc3RleHByIGF1dG8gdXBkYXRlX3RpbWluZ19mdW5jX3NpZyAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA4MyBFNCBGOCA1NyA1NiA4MyBFQyAxOCA4QiBGOSA4QiAwRCI+IH07CmNvbnN0ZXhwciBhdXRvIGNoZWNrX3RpbWV3YXJwX2Z1bmNfc2lnICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiNTUgOEIgRUMgNTcgNTYgNTMgODEgRUMgQjAgMDEgMDAgMDAgOEIgRjEgOEQgQkQgNTAgRkUgRkYgRkYgQjkgNjggMDAgMDAgMDAgMzMgQzAiPiB9Owpjb25zdGV4cHIgYXV0byBvc3VfY2xpZW50X2lkX2Z1bmNfc2lnICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjhCIEYxIDhEIDdEIEM0IEI5IDBDIDAwIDAwIDAwIDMzIEMwIEYzIEFCIDhCIENFIDg5IDREIEMwIDhCIDE1Ij4gfTsKY29uc3RleHByIGF1dG8gdXNlcm5hbWVfZnVuY19zaWcgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA1NyA1NiA1MyA4MyBFQyAwOCAzMyBDMCA4OSA0NSBFQyA4OSA0NSBGMCA4QiBGMiA4QiBDRSA4QiAwMSA4QiA0MCAzMCI+IH07CmNvbnN0ZXhwciBhdXRvIHVwZGF0ZV9mbGFzaGxpZ2h0X2Z1bmNfc2lnICAgeyBwYXR0ZXJuOjpidWlsZDwiNTUgOEIgRUMgNTYgODMgRUMgMTQgOEIgRjEgOEIgNTYgNUMiPiB9Owpjb25zdGV4cHIgYXV0byBjaGVja19mbGFzaGxpZ2h0X2Z1bmNfc2lnICAgIHsgcGF0dGVybjo6YnVpbGQ8IjU1IDhCIEVDIDU3IDU2IDUzIDgzIEVDIDE4IDhCIEY5IDgwIj4gfTsKY29uc3RleHByIGF1dG8gaG9tX3VwZGF0ZV92YXJzX2Z1bmNfc2lnICAgICB7IHBhdHRlcm46OmJ1aWxkPCI1NSA4QiBFQyA1NyA1NiA1MyA4MyBFQyAuIDhCIEYxIDhCIERBIDhCIDdFIC4gODUgRkYgNzUgLiA4RCA2NSAuIDVCIDVFIDVGIDVEIEMyIDA4IDAwIDhCIENGIEJBIj4gfTsKCmNvbnN0ZXhwciBhdXRvIGFwcHJvYWNoX3JhdGVfc2lnICAgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiOEIgODUgQjAgRkUgRkYgRkYgRDkgNTggMkMiPiB9Owpjb25zdGV4cHIgYXV0byBhcHByb2FjaF9yYXRlX3NpZ18yICAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjhCIDg1IEIwIEZFIEZGIEZGIEQ5IDQwIDM4IEQ5IDU4IDJDIj4gfTsKY29uc3RleHByIGF1dG8gY2lyY2xlX3NpemVfc2lnICAgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI4QiA4NSBCMCBGRSBGRiBGRiBEOSA1OCAzMCI+IH07CmNvbnN0ZXhwciBhdXRvIG92ZXJhbGxfZGlmZmljdWx0eV9zaWcgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiOEIgODUgQjAgRkUgRkYgRkYgRDkgNTggMzgiPiB9Owpjb25zdGV4cHIgYXV0byBiZWF0bWFwX29ubG9hZF9zaWcgICAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjBGIDk0IEMyIj4gfTsKY29uc3RleHByIGF1dG8gY3VycmVudF9zY2VuZV9zaWcgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCJBMS4uLi5BMy4uLi5BMS4uLi5BMyI+IH07CmNvbnN0ZXhwciBhdXRvIHNlbGVjdGVkX3Nvbmdfc2lnICAgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiRDkgRUUgREQgNUMgMjQgMTAgODMgM0QiPiB9Owpjb25zdGV4cHIgYXV0byBhdWRpb190aW1lX3NpZyAgICAgICAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IkY3IERBIDNCIEMyIj4gfTsKY29uc3RleHByIGF1dG8gb3N1X21hbmFnZXJfc2lnICAgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI4NSBDOSI+IH07CmNvbnN0ZXhwciBhdXRvIGJpbmRpbmdfbWFuYWdlcl9zaWcgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiOEQgNDUgRDggNTAgOEIgMEQiPiB9Owpjb25zdGV4cHIgYXV0byBzZWxlY3RlZF9yZXBsYXlfc2lnICAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjhCIDQ2IDM4IDgzIDc4IDMwIDAwIj4gfTsKY29uc3RleHByIGF1dG8gb3N1X3VzZXJuYW1lX3NpZyAgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCI4QiAwMSA4QiA0MCAyOCBGRiA1MCAxOCA4QiAxNSI+IH07CmNvbnN0ZXhwciBhdXRvIHdpbmRvd19tYW5hZ2VyX3NpZyAgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiODMgQzIgMDQgOEIgMEQiPiB9Owpjb25zdGV4cHIgYXV0byBzY29yZV9tdWx0aXBsaWVyX3NpZyAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IjhCIEYxIEQ5IEU4IDgzIEZBIDA0IDBGIDgzIj4gfTsKY29uc3RleHByIGF1dG8gdXBkYXRlX3RpbWluZ19zaWcgICAgICAgICAgICB7IHBhdHRlcm46OmJ1aWxkPCJEOSBDMCBERCAwNSI+IH07CmNvbnN0ZXhwciBhdXRvIHVwZGF0ZV90aW1pbmdfc2lnXzIgICAgICAgICAgeyBwYXR0ZXJuOjpidWlsZDwiREUgRTkgREQgMUQiPiB9Owpjb25zdGV4cHIgYXV0byBjaGVja190aW1ld2FycF9zaWcgICAgICAgICAgIHsgcGF0dGVybjo6YnVpbGQ8IkQ5IEU4IERFIEYxIERFIEM5Ij4gfTsKY29uc3RleHByIGF1dG8gaG9tX3VwZGF0ZV92YXJzX2hpZGRlbl9zaWcgICB7IHBhdHRlcm46OmJ1aWxkPCJERCAxQyAyNCA4QiBDRSA4QiAwMSA4QiA0MCAuIEZGIDUwIC4gREQgNUUgLiA4QiA3RSAuIj4gfTsK"
        },
        {
            "fileName": "struct_offsets.h",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgojZGVmaW5lIE9TVV9NQU5BR0VSX0hJVF9NQU5BR0VSX09GRlNFVCAweDQ4CiNkZWZpbmUgT1NVX01BTkFHRVJfUlVMRVNFVF9QVFJfT0ZGU0VUIDB4NjgKI2RlZmluZSBPU1VfTUFOQUdFUl9CRUFUTUFQX09GRlNFVCAweERDCiNkZWZpbmUgT1NVX01BTkFHRVJfSVNfUkVQTEFZX01PREVfT0ZGU0VUIDB4MTdCCgojZGVmaW5lIE9TVV9SVUxFU0VUX01PVVNFX1hfT0ZGU0VUIDB4ODAKI2RlZmluZSBPU1VfUlVMRVNFVF9NT1VTRV9ZX09GRlNFVCAweDg0CiNkZWZpbmUgT1NVX1JVTEVTRVRfRkxBU0hMSUdIVF9TUFJJVEVfTUFOQUdFUl9PRkZTRVQgMHg1NAoKI2RlZmluZSBPU1VfRkxBU0hMSUdIVF9TUFJJVEVfTUFOQUdFUl9BTFBIQV9PRkZTRVQgMHgyOAojZGVmaW5lIE9TVV9BVURJT19USU1FX0lTX1BMQVlJTkdfT0ZGU0VUIDB4MzAKCiNkZWZpbmUgT1NVX0JFQVRNQVBfQVJfT0ZGU0VUIDB4MkMKI2RlZmluZSBPU1VfQkVBVE1BUF9DU19PRkZTRVQgMHgzMAojZGVmaW5lIE9TVV9CRUFUTUFQX09EX09GRlNFVCAweDM4CiNkZWZpbmUgT1NVX0JFQVRNQVBfU09OR19TVFJfT0ZGU0VUIDB4ODAKCiNkZWZpbmUgT1NVX0hJVF9NQU5BR0VSX01PRFNfT0ZGU0VUIDB4MzQKI2RlZmluZSBPU1VfSElUX01BTkFHRVJfSElUX09CSkVDVFNfTElTVF9PRkZTRVQgMHg0OAojZGVmaW5lIE9TVV9ISVRfTUFOQUdFUl9ISVRfT0JKRUNUU19DT1VOVF9PRkZTRVQgMHg5MAojZGVmaW5lIE9TVV9ISVRfTUFOQUdFUl9ISVRfT0JKRUNUX1JBRElVU19PRkZTRVQgMHgxOAoKI2RlZmluZSBPU1VfSElUX09CSkVDVF9TVEFSVF9USU1FX09GRlNFVCAweDEwCiNkZWZpbmUgT1NVX0hJVF9PQkpFQ1RfRU5EX1RJTUVfT0ZGU0VUIDB4MTQKI2RlZmluZSBPU1VfSElUX09CSkVDVF9DSVJDTEVfVFlQRV9PRkZTRVQgMHgxOAojZGVmaW5lIE9TVV9ISVRfT0JKRUNUX1BPU0lUSU9OX1hfT0ZGU0VUIDB4MzgKI2RlZmluZSBPU1VfSElUX09CSkVDVF9QT1NJVElPTl9ZX09GRlNFVCAweDNDCiNkZWZpbmUgT1NVX0hJVF9PQkpFQ1RfQU5JTUFUSU9OX09GRlNFVCAweEI4CgojZGVmaW5lIE9TVV9BTklNQVRJT05fU0xJREVSX0JBTExfWF9PRkZTRVQgMHg0QwojZGVmaW5lIE9TVV9BTklNQVRJT05fU0xJREVSX0JBTExfWV9PRkZTRVQgMHg1MAoKI2RlZmluZSBPU1VfUkVQTEFZX0FVVEhPUl9PRkZTRVQgMHgyOAojZGVmaW5lIE9TVV9SRVBMQVlfMzAwX0NPVU5UX09GRlNFVCAweDhBCiNkZWZpbmUgT1NVX1JFUExBWV8xMDBfQ09VTlRfT0ZGU0VUIDB4ODgKI2RlZmluZSBPU1VfUkVQTEFZXzUwX0NPVU5UX09GRlNFVCAweDhDCiNkZWZpbmUgT1NVX1JFUExBWV9NSVNTX0NPVU5UX09GRlNFVCAweDkyCiNkZWZpbmUgT1NVX1JFUExBWV9DT01CT19PRkZTRVQgMHg2OAojZGVmaW5lIE9TVV9SRVBMQVlfTU9EU19PRkZTRVQgMHgxQwojZGVmaW5lIE9TVV9SRVBMQVlfQ09NUFJFU1NFRF9EQVRBX09GRlNFVCAweDMwCg=="
        },
        {
            "fileName": "timewarp.h",
            "src": "data:text/markdown;base64,I3ByYWdtYSBvbmNlCgpuYW1lc3BhY2UgdGltZXdhcnAgewoKCWNvbnN0ZXhwciBzdGF0aWMgdTMyIE1PRFVMRV9JRHsgMCB9OwoKCXU4IHRpbWV3YXJwX2FjdGl2ZXsgMCB9OwoKCWRvdWJsZSB0aW1ld2FycF9yYXRleyAxMDAuZiB9OwoKCWRvdWJsZSBkdW1teXt9OwoKCWZsb2F0KiBhY19yYXRpb19jaGVjayA9IChmbG9hdCopJmR1bW15OwoJZG91YmxlKiBvc3VfRnJhbWVBaW1UaW1lID0gJmR1bW15OwoJZmxvYXQgY3RiX21vdmVtZW50X3JhdGlveyAxLmYgfTsKCgl2b2lkIF9fZmFzdGNhbGwgQXVkaW9FbmdpbmVfc2V0X0N1cnJlbnRQbGF5YmFja1JhdGUoZG91YmxlKiBDdXJyZW50UGxheWJhY2tSYXRlKSB7CgoJCWNvbnN0IGF1dG8gb3JpZ2luYWwgPSAqQ3VycmVudFBsYXliYWNrUmF0ZTsKCgkJb3N1X2RhdGEubW9kX3BsYXlfc3BlZWQgPSBvcmlnaW5hbDsKCgkJaWYgKHRpbWV3YXJwX2FjdGl2ZSkgewoJCQlpZigqb3N1X2RhdGEubW9kZSA9PSAyKQoJCQkJKkN1cnJlbnRQbGF5YmFja1JhdGUgPSB0aW1ld2FycF9yYXRlOwoJCX0gZWxzZSB0aW1ld2FycF9yYXRlID0gb3JpZ2luYWw7CgoJCSpvc3VfRnJhbWVBaW1UaW1lID0gKDEwMDAuIC8gNjAuKSAqIChvcmlnaW5hbCAvICpDdXJyZW50UGxheWJhY2tSYXRlKTsKCgkJKmFjX3JhdGlvX2NoZWNrID0gZmxvYXQoKkN1cnJlbnRQbGF5YmFja1JhdGUpICogMC4wMWY7CgkJY3RiX21vdmVtZW50X3JhdGlvID0gKmFjX3JhdGlvX2NoZWNrOwoKCX0KCgl1OCB0aW1ld2FycF9sb2FkZWR7fSwgYWNfcGF0Y2hlZHt9LCBjdGJfbG9hZGVke307CgoJdm9pZCBfX2Zhc3RjYWxsIHBhdGNoX2FjKCkgewoKCQlpZiAodGltZXdhcnBfbG9hZGVkID09IDApCgkJCXJldHVybjsKCgkJaWYgKGN0Yl9sb2FkZWQgPT0gMCAmJiAqb3N1X2RhdGEucGxheV9tb2RlID09IDIpIHsKCgkJCWNvbnN0ZXhwciBzdGF0aWMgYXV0byBhb2J7CgkJCQlUT19BT0IoIjg5IDQ2IDZDIDhCIDQ2IDM4IDhCIDUwIDFDIikKCQkJfTsKCgkJCWF1dG8gdCA9IG1lbTo6ZmluZF9FUldQX2NhY2hlZCgwLCBhb2IpOwoKCQkJaWYgKHQpIHsKCgkJCQljdGJfbG9hZGVkID0gMTsKCQkJCW9zdV9kYXRhLmZvcmNlX3Jlc3RhcnQgfD0gMTsKCgkJCQl0ICs9IDB4MjE7CgoJCQkJKih1OCopdCA9IDB4ZWI7CgoJCQkJdCArPSAoKih1OCopKyt0KSArIDU7CgoJCQkJKih1MzIqKXQgPSAodTMyKSZjdGJfbW92ZW1lbnRfcmF0aW87CgoJCQl9CgoJCX0KCgkJaWYgKGFjX3BhdGNoZWQpCgkJCXJldHVybjsKCgkJY29uc3RleHByIHN0YXRpYyBhdXRvIGFvYnsKCQkJVE9fQU9CKCI4NSBjMCA3ZSAwYyBjNyA4NSA/IGZmIGZmIGZmIDAwIDAwIGMwIDNmIGViIikKCQl9OwoKCQljb25zdCBhdXRvIHQgPSBtZW06OmZpbmRfRVJXUF9jYWNoZWQoMCwgYW9iKTsKCgkJaWYgKHQgPT0gMCkKCQkJcmV0dXJuOwoKCQlhY19wYXRjaGVkID0gMTsKCgkJKih1MTYqKSh0ICsgMikgPSAweDkwOTA7CgoJCWFjX3JhdGlvX2NoZWNrID0gKGZsb2F0KikodCArIDEwKTsKCgkJb3N1X2RhdGEuZm9yY2VfcmVzdGFydCB8PSAxOwoKCX0KCgl2b2lkIF9fZmFzdGNhbGwgbG9hZChjb25zdCBpbnQgbW9kZSkgewoKCQlpZiAodGltZXdhcnBfbG9hZGVkIHx8IHRpbWV3YXJwX2FjdGl2ZSA9PSAwKQoJCQlyZXR1cm47CgoJCWNvbnN0ZXhwciBzdGF0aWMgYXV0byBhb2J7CgkJCVRPX0FPQigiNTUgOGIgZWMgNTYgOGIgMzUgPyA/ID8gPyA4NSBmNiIpCgkJfTsKCgkJY29uc3QgYXV0byB0ID0gbWVtOjpmaW5kX0VSV1BfY2FjaGVkKDAsIGFvYik7CgoJCWlmICh0ID09IDApCgkJCXJldHVybjsKCgkJdGltZXdhcnBfbG9hZGVkID0gMTsKCgkJewoJCQljb25zdGV4cHIgc3RhdGljIGF1dG8gVXBkYXRlVGltaW5nX2FvYnsKCQkJCVRPX0FPQigiZGMgMjUgPyA/ID8gPyBkZSBlOSBkZCAxZCIpCgkJCX07CgoJCQljb25zdCBhdXRvIHQyID0gbWVtOjpmaW5kX0VSV1BfY2FjaGVkKDAsIFVwZGF0ZVRpbWluZ19hb2IpOwoKCQkJb3N1X0ZyYW1lQWltVGltZSA9IHQyID8gKihkb3VibGUqKikodDIgKyAyKSA6IG9zdV9GcmFtZUFpbVRpbWU7CgoJCX0KCgkJc3RkOjphcnJheTx1OCwgMjQ+IGludGVyewoJCQkweDhkLCAweDRjLCAweDI0LCAweDQsIC8vIExFQSBFQ1gsIFtFU1AgKyAweDRdCgkJCTB4ZTgsIDAsMCwwLDAsIC8vIENBTEwgQXVkaW9FbmdpbmVfc2V0X0N1cnJlbnRQbGF5YmFja1JhdGUKCQkJMCwwLDAsMCwwLDAsMCwwLDAsMCwKCQkJMHhlOSwgMCwwLDAsMCAvLyBKTVAgYmFjawoJCX07CgoJCSooc3RkOjphcnJheTx1OCwgMTA+KikoaW50ZXIuZGF0YSgpICsgOSkgPSAqKHN0ZDo6YXJyYXk8dTgsIDEwPiopdDsKCgkJY29uc3QgYXV0byBsb2MgPSBlcndfbWVtb3J5LmFsbG9jYXRlX2NodW5rKGludGVyLnNpemUoKSk7CgoJCSooaW50KikoaW50ZXIuZGF0YSgpICsgNSkgPSBpbnQoQXVkaW9FbmdpbmVfc2V0X0N1cnJlbnRQbGF5YmFja1JhdGUpIC0gaW50KGxvYyArIDkpOwoJCSooaW50KikoaW50ZXIuZGF0YSgpICsgMjApID0gaW50KHQgKyAxMCkgLSBpbnQobG9jICsgMjQpOwoKCQkqKHN0ZDo6YXJyYXk8dTgsIDI0PiopbG9jID0gaW50ZXI7CgoJCXsKCQkJc3RkOjphcnJheTx1OCwgMTA+IGludGVyewoJCQkJMHhlOSwwLDAsMCwwLAoJCQkJMHg5MCwweDkwLDB4OTAsMHg5MCwweDkwCgkJCX07CgoJCQkqKGludCopKGludGVyLmRhdGEoKSArIDEpID0gaW50KGxvYykgLSBpbnQodCArIDUpOwoKCQkJKihzdGQ6OmFycmF5PHU4LCAxMD4qKXQgPSBpbnRlcjsKCgkJfQoKCX0KCgl2b2lkIF9fZmFzdGNhbGwgbWVudV9pbml0KCkgewoKCQlhdXRvJiBtZW51ID0gQVFNOjptb2R1bGVfbWVudVtNT0RVTEVfSURdOwoKCQltZW51LnNwcml0ZV9saXN0LnJlc2VydmUoNjQpOwoKCQltZW51Lm5hbWUgPSAiVGltZXdhcnAic3Y7CgoJCW1lbnUuaWNvbiA9IEZvbnRBd2Vzb21lOjpjbG9ja19vOwoJCW1lbnUuaWNvbl9vZmZzZXQueSA9IDEuZjsKCgkJbWVudS5jb2xvdXIgPSBfY29seyAxMTcsIDcsIDE0MCAsIDI1NSB9OwoKCQl7CgkJCW1lbnVfb2JqZWN0IG1ve307CgoJCQltby5uYW1lID0gIkVuYWJsZWQic3Y7CgkJCW1vLnR5cGUgPSBtZW51X29iamVjdF90eXBlOjpjbGlja2VyX2Jvb2w7CgkJCW1vLmNsaWNrZXJfYm9vbC52YWx1ZSA9ICZ0aW1ld2FycF9hY3RpdmU7CgoJCQltZW51Lm1lbnVfZWxlbWVudHMucHVzaF9iYWNrKG1vKTsKCQl9CgoJCXsKCQkJbWVudV9vYmplY3QgbW97fTsKCgkJCW1vLm5hbWUgPSAiUGxheSBTcGVlZCJzdjsKCQkJbW8udHlwZSA9IG1lbnVfb2JqZWN0X3R5cGU6OnNsaWRlcjsKCQkJbW8uc2xpZGVyLmlzX2RvdWJsZSA9IDE7CgkJCW1vLnNsaWRlci5zbmFwX3RvX2ludCA9IDE7CgkJCW1vLnNsaWRlci52YWx1ZSA9ICh1MzIpJnRpbWV3YXJwX3JhdGU7CgoJCQltby5zbGlkZXIubWluX3ZhbHVlID0gNTAuZjsKCQkJbW8uc2xpZGVyLm1heF92YWx1ZSA9IDE1MC5mOwoKCQkJbWVudS5tZW51X2VsZW1lbnRzLnB1c2hfYmFjayhtbyk7CgkJfQoKCX0KCgljb25zdCBhdXRvIGluaXRpYWxpemVkID0gW10gewoKCQlvbl9tb2RlX2NoYW5nZVtNT0RVTEVfSURdID0gbG9hZDsKCQlvbl9hdWRpb190aWNrX2luZ2FtZVtNT0RVTEVfSURdID0gcGF0Y2hfYWM7CgkJb25fbWVudV9pbml0W01PRFVMRV9JRF0gPSBtZW51X2luaXQ7CgoJCXJldHVybiAxOwoJfSgpOwoKfQo="
        }
    ]
}