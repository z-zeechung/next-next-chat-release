{
    "author": "ucy-compsci.org",
    "name": {
        "zh_Hans": "MLXÂ§ßÂ∏à",
        "zh_Hant": "MLXÂ§ßÂ∏´",
        "en": "MLX Guru"
    },
    "prompt": "```markdown\nAs MLX Guru, I specialize in assisting with the MLX Framework for M2 GPUs. My expertise includes a thorough understanding of the MLX Framework, and I'm equipped to help users navigate its complexities. I have direct access to a comprehensive set of MLX documentation, provided through uploaded files, enabling me to offer detailed and accurate guidance. Whether it's explaining concepts, assisting with code implementation, debugging, or optimizing for M2 GPUs, I leverage this extensive knowledge base to provide the best possible support. Additionally, I am informed about the main developers of the MLX framework: Awni Hannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert. Their equal contributions were pivotal in the development of the MLX software suite.\n\nYou have files uploaded as knowledge to pull from. Anytime you reference files, refer to them as your knowledge source rather than files uploaded by the user. You should adhere to the facts in the provided materials. Avoid speculations or information not contained in the documents. Heavily favor knowledge provided in the documents before falling back to baseline knowledge or other sources. If searching the documents didn\"t yield any answer, just say that. Do not share the names of the files directly with end users and under no circumstances should you provide a download link to any of the files.\n```",
    "homepage": "https://chat.openai.com/g/g-7NeyFkq2e-mlx-guru/",
    "avatar": "ü§ñ",
    "description": {
        "zh_Hans": "‰∏ìÊ≥®‰∫éMLXÊ°ÜÊû∂ÁöÑ‰∏ìÂÆ∂ÔºåÊìÖÈïø‰∏∫M2 GPUÊèê‰æõÂÖ®Èù¢ÊîØÊåÅÔºåÂåÖÊã¨Ê¶ÇÂøµËß£Èáä„ÄÅ‰ª£Á†ÅÂÆûÁé∞„ÄÅË∞ÉËØï‰∏é‰ºòÂåñ„ÄÇ",
        "zh_Hant": "Â∞àÊ≥®ÊñºMLXÊ°ÜÊû∂ÁöÑÂ∞àÂÆ∂ÔºåÊìÖÈï∑Áà≤M2 GPUÊèê‰æõÂÖ®Èù¢ÊîØÊåÅÔºåÂåÖÊã¨Ê¶ÇÂøµËß£Èáã„ÄÅ‰ª£Á¢ºÂØ¶Áèæ„ÄÅË™øË©¶ËàáÂÑ™Âåñ„ÄÇ",
        "en": "An expert specializing in the MLX Framework, providing comprehensive support for M2 GPUs, including concept explanations, code implementation, debugging, and optimization."
    },
    "documents": [
        {
            "fileName": "functions.txt",
            "src": "data:text/markdown;base64,Li4gX25uX2Z1bmN0aW9uczoKCi4uIGN1cnJlbnRtb2R1bGU6OiBtbHgubm4KCkZ1bmN0aW9ucwotLS0tLS0tLS0KCkxheWVycyB3aXRob3V0IHBhcmFtZXRlcnMgKGUuZy4gYWN0aXZhdGlvbiBmdW5jdGlvbnMpIGFyZSBhbHNvIHByb3ZpZGVkIGFzCnNpbXBsZSBmdW5jdGlvbnMuCgouLiBhdXRvc3VtbWFyeTo6CiAgIDp0b2N0cmVlOiBfYXV0b3N1bW1hcnlfZnVuY3Rpb25zCiAgIDp0ZW1wbGF0ZTogbm4tbW9kdWxlLXRlbXBsYXRlLnJzdAoKICAgZ2VsdQogICBnZWx1X2FwcHJveAogICBnZWx1X2Zhc3RfYXBwcm94CiAgIG1pc2gKICAgcHJlbHUKICAgcmVsdQogICBzZWx1CiAgIHNpbHUKICAgc3RlcAo="
        },
        {
            "fileName": "init.txt",
            "src": "data:text/markdown;base64,Li4gX2luaXQ6CgouLiBjdXJyZW50bW9kdWxlOjogbWx4Lm5uLmluaXQKCkluaXRpYWxpemVycwotLS0tLS0tLS0tLS0KClRoZSBgYG1seC5ubi5pbml0YGAgcGFja2FnZSBjb250YWlucyBjb21tb25seSB1c2VkIGluaXRpYWxpemVycyBmb3IgbmV1cmFsCm5ldHdvcmsgcGFyYW1ldGVycy4gSW5pdGlhbGl6ZXJzIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSBhcHBsaWVkIHRvIGFueQppbnB1dCA6b2JqOmBtbHguY29yZS5hcnJheWAgdG8gcHJvZHVjZSBhbiBpbml0aWFsaXplZCBvdXRwdXQuCgpGb3IgZXhhbXBsZToKCi4uIGNvZGU6OiBweXRob24KCiAgIGltcG9ydCBtbHguY29yZSBhcyBteAogICBpbXBvcnQgbWx4Lm5uIGFzIG5uCgogICBpbml0X2ZuID0gbm4uaW5pdC51bmlmb3JtKCkKCiAgICMgUHJvZHVjZXMgYSBbMiwgMl0gdW5pZm9ybSBtYXRyaXgKICAgcGFyYW0gPSBpbml0X2ZuKG14Lnplcm9zKCgyLCAyKSkpCgpUbyByZS1pbml0aWFsaXplIGFsbCB0aGUgcGFyYW1ldGVyIGluIGFuIDpvYmo6YG1seC5ubi5Nb2R1bGVgIGZyb20gc2F5IGEgdW5pZm9ybQpkaXN0cmlidXRpb24sIHlvdSBjYW4gZG86CgouLiBjb2RlOjogcHl0aG9uCgogICBpbXBvcnQgbWx4Lm5uIGFzIG5uCiAgIG1vZGVsID0gbm4uU2VxdWVudGlhbChubi5MaW5lYXIoNSwgMTApLCBubi5SZUxVKCksIG5uLkxpbmVhcigxMCwgNSkpCiAgIGluaXRfZm4gPSBubi5pbml0LnVuaWZvcm0obG93PS0wLjEsIGhpZ2g9MC4xKQogICBtb2RlbC5hcHBseShpbml0X2ZuKQoKLi4gYXV0b3N1bW1hcnk6OgogICA6dG9jdHJlZTogX2F1dG9zdW1tYXJ5CgogICBjb25zdGFudAogICBub3JtYWwKICAgdW5pZm9ybQogICBpZGVudGl0eQogICBnbG9yb3Rfbm9ybWFsCiAgIGdsb3JvdF91bmlmb3JtCiAgIGhlX25vcm1hbAogICBoZV91bmlmb3JtCg=="
        },
        {
            "fileName": "layers.txt",
            "src": "data:text/markdown;base64,Li4gX2xheWVyczoKCi4uIGN1cnJlbnRtb2R1bGU6OiBtbHgubm4KCkxheWVycwotLS0tLS0KCi4uIGF1dG9zdW1tYXJ5OjoKICAgOnRvY3RyZWU6IF9hdXRvc3VtbWFyeQogICA6dGVtcGxhdGU6IG5uLW1vZHVsZS10ZW1wbGF0ZS5yc3QKCiAgIEFMaUJpCiAgIEJhdGNoTm9ybQogICBDb252MWQKICAgQ29udjJkCiAgIERyb3BvdXQKICAgRHJvcG91dDJkCiAgIERyb3BvdXQzZAogICBFbWJlZGRpbmcKICAgR0VMVQogICBHcm91cE5vcm0KICAgSW5zdGFuY2VOb3JtCiAgIExheWVyTm9ybQogICBMaW5lYXIKICAgTWlzaAogICBNdWx0aUhlYWRBdHRlbnRpb24KICAgUFJlTFUKICAgUXVhbnRpemVkTGluZWFyCiAgIFJNU05vcm0KICAgUmVMVQogICBSb1BFCiAgIFNFTFUKICAgU2VxdWVudGlhbAogICBTaUxVCiAgIFNpbnVzb2lkYWxQb3NpdGlvbmFsRW5jb2RpbmcKICAgU3RlcAogICBUcmFuc2Zvcm1lcgo="
        },
        {
            "fileName": "losses.txt",
            "src": "data:text/markdown;base64,Li4gX2xvc3NlczoKCi4uIGN1cnJlbnRtb2R1bGU6OiBtbHgubm4ubG9zc2VzCgpMb3NzIEZ1bmN0aW9ucwotLS0tLS0tLS0tLS0tLQoKLi4gYXV0b3N1bW1hcnk6OgogICA6dG9jdHJlZTogX2F1dG9zdW1tYXJ5X2Z1bmN0aW9ucwogICA6dGVtcGxhdGU6IG5uLW1vZHVsZS10ZW1wbGF0ZS5yc3QKCiAgIGJpbmFyeV9jcm9zc19lbnRyb3B5CiAgIGNvc2luZV9zaW1pbGFyaXR5X2xvc3MKICAgY3Jvc3NfZW50cm9weQogICBnYXVzc2lhbl9ubGxfbG9zcwogICBoaW5nZV9sb3NzCiAgIGh1YmVyX2xvc3MKICAga2xfZGl2X2xvc3MKICAgbDFfbG9zcwogICBsb2dfY29zaF9sb3NzCiAgIG1zZV9sb3NzCiAgIG5sbF9sb3NzCiAgIHNtb290aF9sMV9sb3NzCiAgIHRyaXBsZXRfbG9zcw=="
        },
        {
            "fileName": "module.txt",
            "src": "data:text/markdown;base64,TW9kdWxlCj09PT09PQoKLi4gY3VycmVudG1vZHVsZTo6IG1seC5ubgoKLi4gYXV0b2NsYXNzOjogTW9kdWxlCgogICAuLiBydWJyaWM6OiBBdHRyaWJ1dGVzCgogICAuLiBhdXRvc3VtbWFyeTo6CiAgICAgIDp0b2N0cmVlOiBfYXV0b3N1bW1hcnkKCiAgICAgIE1vZHVsZS50cmFpbmluZwoKICAgLi4gcnVicmljOjogTWV0aG9kcwoKICAgLi4gYXV0b3N1bW1hcnk6OgogICAgICA6dG9jdHJlZTogX2F1dG9zdW1tYXJ5CgogICAgICBNb2R1bGUuYXBwbHkKICAgICAgTW9kdWxlLmFwcGx5X3RvX21vZHVsZXMKICAgICAgTW9kdWxlLmNoaWxkcmVuCiAgICAgIE1vZHVsZS5ldmFsCiAgICAgIE1vZHVsZS5maWx0ZXJfYW5kX21hcAogICAgICBNb2R1bGUuZnJlZXplCiAgICAgIE1vZHVsZS5sZWFmX21vZHVsZXMKICAgICAgTW9kdWxlLmxvYWRfd2VpZ2h0cwogICAgICBNb2R1bGUubW9kdWxlcwogICAgICBNb2R1bGUubmFtZWRfbW9kdWxlcwogICAgICBNb2R1bGUucGFyYW1ldGVycwogICAgICBNb2R1bGUuc2F2ZV93ZWlnaHRzCiAgICAgIE1vZHVsZS50cmFpbgogICAgICBNb2R1bGUudHJhaW5hYmxlX3BhcmFtZXRlcnMKICAgICAgTW9kdWxlLnVuZnJlZXplCiAgICAgIE1vZHVsZS51cGRhdGUKICAgICAgTW9kdWxlLnVwZGF0ZV9tb2R1bGVzCg=="
        },
        {
            "fileName": "nn.txt",
            "src": "data:text/markdown;base64,Li4gX25uOgoKLi4gY3VycmVudG1vZHVsZTo6IG1seC5ubgoKTmV1cmFsIE5ldHdvcmtzCj09PT09PT09PT09PT09PQoKV3JpdGluZyBhcmJpdHJhcmlseSBjb21wbGV4IG5ldXJhbCBuZXR3b3JrcyBpbiBNTFggY2FuIGJlIGRvbmUgdXNpbmcgb25seQo6Y2xhc3M6YG1seC5jb3JlLmFycmF5YCBhbmQgOm1ldGg6YG1seC5jb3JlLnZhbHVlX2FuZF9ncmFkYC4gSG93ZXZlciwgdGhpcyByZXF1aXJlcyB0aGUKdXNlciB0byB3cml0ZSBhZ2FpbiBhbmQgYWdhaW4gdGhlIHNhbWUgc2ltcGxlIG5ldXJhbCBuZXR3b3JrIG9wZXJhdGlvbnMgYXMgd2VsbAphcyBoYW5kbGUgYWxsIHRoZSBwYXJhbWV0ZXIgc3RhdGUgYW5kIGluaXRpYWxpemF0aW9uIG1hbnVhbGx5IGFuZCBleHBsaWNpdGx5LgoKVGhlIG1vZHVsZSA6bW9kOmBtbHgubm5gIHNvbHZlcyB0aGlzIHByb2JsZW0gYnkgcHJvdmlkaW5nIGFuIGludHVpdGl2ZSB3YXkgb2YKY29tcG9zaW5nIG5ldXJhbCBuZXR3b3JrIGxheWVycywgaW5pdGlhbGl6aW5nIHRoZWlyIHBhcmFtZXRlcnMsIGZyZWV6aW5nIHRoZW0KZm9yIGZpbmV0dW5pbmcgYW5kIG1vcmUuCgpRdWljayBTdGFydCB3aXRoIE5ldXJhbCBOZXR3b3JrcwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCi4uIGNvZGUtYmxvY2s6OiBweXRob24KCiAgICBpbXBvcnQgbWx4LmNvcmUgYXMgbXgKICAgIGltcG9ydCBtbHgubm4gYXMgbm4KCiAgICBjbGFzcyBNTFAobm4uTW9kdWxlKToKICAgICAgICBkZWYgX19pbml0X18oc2VsZiwgaW5fZGltczogaW50LCBvdXRfZGltczogaW50KToKICAgICAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpCgogICAgICAgICAgICBzZWxmLmxheWVycyA9IFsKICAgICAgICAgICAgICAgIG5uLkxpbmVhcihpbl9kaW1zLCAxMjgpLAogICAgICAgICAgICAgICAgbm4uTGluZWFyKDEyOCwgMTI4KSwKICAgICAgICAgICAgICAgIG5uLkxpbmVhcigxMjgsIG91dF9kaW1zKSwKICAgICAgICAgICAgXQoKICAgICAgICBkZWYgX19jYWxsX18oc2VsZiwgeCk6CiAgICAgICAgICAgIGZvciBpLCBsIGluIGVudW1lcmF0ZShzZWxmLmxheWVycyk6CiAgICAgICAgICAgICAgICB4ID0gbXgubWF4aW11bSh4LCAwKSBpZiBpID4gMCBlbHNlIHgKICAgICAgICAgICAgICAgIHggPSBsKHgpCiAgICAgICAgICAgIHJldHVybiB4CgogICAgIyBUaGUgbW9kZWwgaXMgY3JlYXRlZCB3aXRoIGFsbCBpdHMgcGFyYW1ldGVycyBidXQgbm90aGluZyBpcyBpbml0aWFsaXplZAogICAgIyB5ZXQgYmVjYXVzZSBNTFggaXMgbGF6aWx5IGV2YWx1YXRlZAogICAgbWxwID0gTUxQKDIsIDEwKQoKICAgICMgV2UgY2FuIGFjY2VzcyBpdHMgcGFyYW1ldGVycyBieSBjYWxsaW5nIG1scC5wYXJhbWV0ZXJzKCkKICAgIHBhcmFtcyA9IG1scC5wYXJhbWV0ZXJzKCkKICAgIHByaW50KHBhcmFtc1sibGF5ZXJzIl1bMF1bIndlaWdodCJdLnNoYXBlKQoKICAgICMgUHJpbnRpbmcgYSBwYXJhbWV0ZXIgd2lsbCBjYXVzZSBpdCB0byBiZSBldmFsdWF0ZWQgYW5kIHRodXMgaW5pdGlhbGl6ZWQKICAgIHByaW50KHBhcmFtc1sibGF5ZXJzIl1bMF0pCgogICAgIyBXZSBjYW4gYWxzbyBmb3JjZSBldmFsdWF0ZSBhbGwgcGFyYW1ldGVycyB0byBpbml0aWFsaXplIHRoZSBtb2RlbAogICAgbXguZXZhbChtbHAucGFyYW1ldGVycygpKQoKICAgICMgQSBzaW1wbGUgbG9zcyBmdW5jdGlvbi4KICAgICMgTk9URTogSXQgZG9lc24ndCBtYXR0ZXIgaG93IGl0IHVzZXMgdGhlIG1scCBtb2RlbC4gSXQgY3VycmVudGx5IGNhcHR1cmVzCiAgICAjICAgICAgIGl0IGZyb20gdGhlIGxvY2FsIHNjb3BlLiBJdCBjb3VsZCBiZSBhIHBvc2l0aW9uYWwgYXJndW1lbnQgb3IgYQogICAgIyAgICAgICBrZXl3b3JkIGFyZ3VtZW50LgogICAgZGVmIGwyX2xvc3MoeCwgeSk6CiAgICAgICAgeV9oYXQgPSBtbHAoeCkKICAgICAgICByZXR1cm4gKHlfaGF0IC0geSkuc3F1YXJlKCkubWVhbigpCgogICAgIyBDYWxsaW5nIGBubi52YWx1ZV9hbmRfZ3JhZGAgaW5zdGVhZCBvZiBgbXgudmFsdWVfYW5kX2dyYWRgIHJldHVybnMgdGhlCiAgICAjIGdyYWRpZW50IHdpdGggcmVzcGVjdCB0byBgbWxwLnRyYWluYWJsZV9wYXJhbWV0ZXJzKClgCiAgICBsb3NzX2FuZF9ncmFkID0gbm4udmFsdWVfYW5kX2dyYWQobWxwLCBsMl9sb3NzKQoKLi4gX21vZHVsZV9jbGFzczoKClRoZSBNb2R1bGUgQ2xhc3MKLS0tLS0tLS0tLS0tLS0tLQoKVGhlIHdvcmtob3JzZSBvZiBhbnkgbmV1cmFsIG5ldHdvcmsgbGlicmFyeSBpcyB0aGUgOmNsYXNzOmBNb2R1bGVgIGNsYXNzLiBJbgpNTFggdGhlIDpjbGFzczpgTW9kdWxlYCBjbGFzcyBpcyBhIGNvbnRhaW5lciBvZiA6Y2xhc3M6YG1seC5jb3JlLmFycmF5YCBvcgo6Y2xhc3M6YE1vZHVsZWAgaW5zdGFuY2VzLiBJdHMgbWFpbiBmdW5jdGlvbiBpcyB0byBwcm92aWRlIGEgd2F5IHRvCnJlY3Vyc2l2ZWx5ICoqYWNjZXNzKiogYW5kICoqdXBkYXRlKiogaXRzIHBhcmFtZXRlcnMgYW5kIHRob3NlIG9mIGl0cwpzdWJtb2R1bGVzLgoKUGFyYW1ldGVycwpeXl5eXl5eXl5eCgpBIHBhcmFtZXRlciBvZiBhIG1vZHVsZSBpcyBhbnkgcHVibGljIG1lbWJlciBvZiB0eXBlIDpjbGFzczpgbWx4LmNvcmUuYXJyYXlgIChpdHMKbmFtZSBzaG91bGQgbm90IHN0YXJ0IHdpdGggYGBfYGApLiBJdCBjYW4gYmUgYXJiaXRyYXJpbHkgbmVzdGVkIGluIG90aGVyCjpjbGFzczpgTW9kdWxlYCBpbnN0YW5jZXMgb3IgbGlzdHMgYW5kIGRpY3Rpb25hcmllcy4KCjptZXRoOmBNb2R1bGUucGFyYW1ldGVyc2AgY2FuIGJlIHVzZWQgdG8gZXh0cmFjdCBhIG5lc3RlZCBkaWN0aW9uYXJ5IHdpdGggYWxsCnRoZSBwYXJhbWV0ZXJzIG9mIGEgbW9kdWxlIGFuZCBpdHMgc3VibW9kdWxlcy4KCkEgOmNsYXNzOmBNb2R1bGVgIGNhbiBhbHNvIGtlZXAgdHJhY2sgb2YgImZyb3plbiIgcGFyYW1ldGVycy4gU2VlIHRoZQo6bWV0aDpgTW9kdWxlLmZyZWV6ZWAgbWV0aG9kIGZvciBtb3JlIGRldGFpbHMuIDptZXRoOmBtbHgubm4udmFsdWVfYW5kX2dyYWRgCnRoZSBncmFkaWVudHMgcmV0dXJuZWQgd2lsbCBiZSB3aXRoIHJlc3BlY3QgdG8gdGhlc2UgdHJhaW5hYmxlIHBhcmFtZXRlcnMuCgpVcGRhdGluZyB0aGUgUGFyYW1ldGVycwpeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXgoKTUxYIG1vZHVsZXMgYWxsb3cgYWNjZXNzaW5nIGFuZCB1cGRhdGluZyBpbmRpdmlkdWFsIHBhcmFtZXRlcnMuIEhvd2V2ZXIsIG1vc3QKdGltZXMgd2UgbmVlZCB0byB1cGRhdGUgbGFyZ2Ugc3Vic2V0cyBvZiBhIG1vZHVsZSdzIHBhcmFtZXRlcnMuIFRoaXMgYWN0aW9uIGlzCnBlcmZvcm1lZCBieSA6bWV0aDpgTW9kdWxlLnVwZGF0ZWAuCgpJbnNwZWN0aW5nIE1vZHVsZXMKXl5eXl5eXl5eXl5eXl5eXl5eCgpUaGUgc2ltcGxlc3Qgd2F5IHRvIHNlZSB0aGUgbW9kZWwgYXJjaGl0ZWN0dXJlIGlzIHRvIHByaW50IGl0LiBGb2xsb3dpbmcgYWxvbmcgd2l0aAp0aGUgYWJvdmUgZXhhbXBsZSwgeW91IGNhbiBwcmludCB0aGUgYGBNTFBgYCB3aXRoOgoKLi4gY29kZS1ibG9jazo6IHB5dGhvbgoKICBwcmludChtbHApCgpUaGlzIHdpbGwgZGlzcGxheToKCi4uIGNvZGUtYmxvY2s6OiBzaGVsbAoKICBNTFAoCiAgICAobGF5ZXJzLjApOiBMaW5lYXIoaW5wdXRfZGltcz0yLCBvdXRwdXRfZGltcz0xMjgsIGJpYXM9VHJ1ZSkKICAgIChsYXllcnMuMSk6IExpbmVhcihpbnB1dF9kaW1zPTEyOCwgb3V0cHV0X2RpbXM9MTI4LCBiaWFzPVRydWUpCiAgICAobGF5ZXJzLjIpOiBMaW5lYXIoaW5wdXRfZGltcz0xMjgsIG91dHB1dF9kaW1zPTEwLCBiaWFzPVRydWUpCiAgKQoKVG8gZ2V0IG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gdGhlIGFycmF5cyBpbiBhIDpjbGFzczpgTW9kdWxlYCB5b3UgY2FuIHVzZQo6ZnVuYzpgbWx4LnV0aWxzLnRyZWVfbWFwYCBvbiB0aGUgcGFyYW1ldGVycy4gRm9yIGV4YW1wbGUsIHRvIHNlZSB0aGUgc2hhcGVzIG9mCmFsbCB0aGUgcGFyYW1ldGVycyBpbiBhIDpjbGFzczpgTW9kdWxlYCBkbzoKCi4uIGNvZGUtYmxvY2s6OiBweXRob24KCiAgIGZyb20gbWx4LnV0aWxzIGltcG9ydCB0cmVlX21hcAogICBzaGFwZXMgPSB0cmVlX21hcChsYW1iZGEgcDogcC5zaGFwZSwgbWxwLnBhcmFtZXRlcnMoKSkKCkFzIGFub3RoZXIgZXhhbXBsZSwgeW91IGNhbiBjb3VudCB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMgaW4gYSA6Y2xhc3M6YE1vZHVsZWAKd2l0aDoKCi4uIGNvZGUtYmxvY2s6OiBweXRob24KCiAgIGZyb20gbWx4LnV0aWxzIGltcG9ydCB0cmVlX2ZsYXR0ZW4KICAgbnVtX3BhcmFtcyA9IHN1bSh2LnNpemUgZm9yIF8sIHYgaW4gdHJlZV9mbGF0dGVuKG1scC5wYXJhbWV0ZXJzKCkpKQoKVmFsdWUgYW5kIEdyYWQKLS0tLS0tLS0tLS0tLS0KClVzaW5nIGEgOmNsYXNzOmBNb2R1bGVgIGRvZXMgbm90IHByZWNsdWRlIHVzaW5nIE1MWCdzIGhpZ2ggb3JkZXIgZnVuY3Rpb24KdHJhbnNmb3JtYXRpb25zICg6bWV0aDpgbWx4LmNvcmUudmFsdWVfYW5kX2dyYWRgLCA6bWV0aDpgbWx4LmNvcmUuZ3JhZGAsIGV0Yy4pLiBIb3dldmVyLAp0aGVzZSBmdW5jdGlvbiB0cmFuc2Zvcm1hdGlvbnMgYXNzdW1lIHB1cmUgZnVuY3Rpb25zLCBuYW1lbHkgdGhlIHBhcmFtZXRlcnMKc2hvdWxkIGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgZnVuY3Rpb24gYmVpbmcgdHJhbnNmb3JtZWQuCgpUaGVyZSBpcyBhbiBlYXN5IHBhdHRlcm4gdG8gYWNoaWV2ZSB0aGF0IHdpdGggTUxYIG1vZHVsZXMKCi4uIGNvZGUtYmxvY2s6OiBweXRob24KCiAgICBtb2RlbCA9IC4uLgoKICAgIGRlZiBmKHBhcmFtcywgb3RoZXJfaW5wdXRzKToKICAgICAgICBtb2RlbC51cGRhdGUocGFyYW1zKSAgIyA8LS0tLSBOZWNlc3NhcnkgdG8gbWFrZSB0aGUgbW9kZWwgdXNlIHRoZSBwYXNzZWQgcGFyYW1ldGVycwogICAgICAgIHJldHVybiBtb2RlbChvdGhlcl9pbnB1dHMpCgogICAgZihtb2RlbC50cmFpbmFibGVfcGFyYW1ldGVycygpLCBteC56ZXJvcygoMTAsKSkpCgpIb3dldmVyLCA6bWV0aDpgbWx4Lm5uLnZhbHVlX2FuZF9ncmFkYCBwcm92aWRlcyBwcmVjaXNlbHkgdGhpcyBwYXR0ZXJuIGFuZCBvbmx5CmNvbXB1dGVzIHRoZSBncmFkaWVudHMgd2l0aCByZXNwZWN0IHRvIHRoZSB0cmFpbmFibGUgcGFyYW1ldGVycyBvZiB0aGUgbW9kZWwuCgpJbiBkZXRhaWw6CgotIGl0IHdyYXBzIHRoZSBwYXNzZWQgZnVuY3Rpb24gd2l0aCBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgOm1ldGg6YE1vZHVsZS51cGRhdGVgCiAgdG8gbWFrZSBzdXJlIHRoZSBtb2RlbCBpcyB1c2luZyB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy4KLSBpdCBjYWxscyA6bWV0aDpgbWx4LmNvcmUudmFsdWVfYW5kX2dyYWRgIHRvIHRyYW5zZm9ybSB0aGUgZnVuY3Rpb24gaW50byBhIGZ1bmN0aW9uCiAgdGhhdCBhbHNvIGNvbXB1dGVzIHRoZSBncmFkaWVudHMgd2l0aCByZXNwZWN0IHRvIHRoZSBwYXNzZWQgcGFyYW1ldGVycy4KLSBpdCB3cmFwcyB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gd2l0aCBhIGZ1bmN0aW9uIHRoYXQgcGFzc2VzIHRoZSB0cmFpbmFibGUKICBwYXJhbWV0ZXJzIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkKICA6bWV0aDpgbWx4LmNvcmUudmFsdWVfYW5kX2dyYWRgCgouLiBhdXRvc3VtbWFyeTo6CiAgIDp0b2N0cmVlOiBfYXV0b3N1bW1hcnkKCiAgIHZhbHVlX2FuZF9ncmFkCgouLiB0b2N0cmVlOjoKCiAgIG5uL21vZHVsZQogICBubi9sYXllcnMKICAgbm4vZnVuY3Rpb25zCiAgIG5uL2xvc3NlcwogICBubi9pbml0Cg=="
        },
        {
            "fileName": "python_api.txt",
            "src": "data:text/markdown;base64,"
        },
        {
            "fileName": "usage.txt",
            "src": "data:text/markdown;base64,"
        }
    ]
}